ggdensity(Planet_not_habitable$S_L)
ggdensity(Planet_not_habitable$S_T)
ggdensity(Planet_not_habitable$P_D)
View(phl_exoplanet_catalog)
Planet_not_habitable<-subset(phl_exoplanet_catalog,P_HABITABLE==0)
ggdensity(Planet_not_habitable$P_DISTANCE)
Planet_not_habitable<-subset(Planets_dataset,P_H==0)
ggdensity(Planet_not_habitable$P_D)
Planet_not_habitable<-subset(phl_exoplanet_catalog,P_HABITABLE==0)
ggdensity(Planet_not_habitable$S_LUMINOSITY)
Planet_not_habitable<-subset(Planets_dataset,P_H==0)
ggdensity(Planet_not_habitable$S_L)
Planet_not_habitable<-subset(phl_exoplanet_catalog,P_HABITABLE==0)
ggdensity(Planet_not_habitable$S_LUMINOSITY)
Planet_dataset_no_habit<- sample(3657,350)
phl_exoplanet_no_habit<-phl_exoplanet_catalog[,phl_exoplanet_catalog]
phl_exoplanet_no_habit<-phl_exoplanet_catalog[phl_exoplanet_catalog,]
phl_exoplanet_catalog[phl_exoplanet_catalog,]
phl_exoplanet<-phl_exoplanet_catalog[phl_exoplanet_catalog]
phl_exoplanet<-Planet_dataset_no_habit[phl_exoplanet_catalog,]
phl_exoplanet<-Planet_not_habitable[phl_exoplanet_catalog,]
Planet_dataset_no_habit<- sample(3657,350)
phl_exoplanet<-Planet_not_habitable[Planet_dataset_no_habit,]
View(phl_exoplanet_catalog)
View(phl_exoplanet)
library(readxl)
phl_exoplanet_catalog_RENAMED <- read_excel("phl_exoplanet_catalog_RENAMED.xlsx")
View(phl_exoplanet_catalog_RENAMED)
Planet_not_habitable<-subset(phl_exoplanet_catalog_RENAMED,P_H==0)
Planet_not_habitable<-subset(phl_exoplanet_catalog_RENAMED,P_H==0)
phl_exoplanet_catalog_RENAMED <- read_excel("phl_exoplanet_catalog_RENAMED.xlsx")
Planet_not_habitable<-subset(phl_exoplanet_catalog_RENAMED,P_H==0)
Planet_dataset_no_habit<- sample(3657,345)
phl_exoplanet<-phl_exoplanet_catalog_RENAMED[Planet_dataset_no_habit,]
View(phl_exoplanet)
phl_exoplanet_catalog_RENAMED <- read_excel("phl_exoplanet_catalog_RENAMED.xlsx")
Planet_not_habitable_l<-subset(phl_exoplanet_catalog_RENAMED,P_H==0)
Planet_habitable<-subset(phl_exoplanet_catalog_RENAMED,P_H==1)
Planet_dataset_no_habit<- sample(3657,345)
phl_exoplanet_not_habitable<-phl_exoplanet_catalog_RENAMED[Planet_dataset_no_habit_l,]
final_exoplanet<-rbind(Planet_habitable,phl_exoplanet_not_habitable)
phl_exoplanet_catalog_RENAMED <- read_excel("phl_exoplanet_catalog_RENAMED.xlsx")
Planet_not_habitable_l<-subset(phl_exoplanet_catalog_RENAMED,P_H==0)
Planet_habitable<-subset(phl_exoplanet_catalog_RENAMED,P_H==1)
Planet_dataset_no_habit<- sample(3657,345)
phl_exoplanet_not_habitable<-phl_exoplanet_catalog_RENAMED[Planet_not_habitable_l,]
final_exoplanet<-rbind(Planet_habitable,phl_exoplanet_not_habitable)
phl_exoplanet_catalog_RENAMED <- read_excel("phl_exoplanet_catalog_RENAMED.xlsx")
Planet_not_habitable_l<-subset(phl_exoplanet_catalog_RENAMED,P_H==0)
Planet_habitable<-subset(phl_exoplanet_catalog_RENAMED,P_H==1)
Planet_dataset_no_habit<- sample(3657,345)
phl_exoplanet_not_habitable<-phl_exoplanet_catalog_RENAMED[Planet_dataset_no_habit,]
final_exoplanet<-rbind(Planet_habitable,phl_exoplanet_not_habitable)
phl_exoplanet_catalog_RENAMED <- read_excel("phl_exoplanet_catalog_RENAMED.xlsx")
Planet_not_habitable_l<-subset(phl_exoplanet_catalog_RENAMED,P_H==0)
Planet_habitable<-subset(phl_exoplanet_catalog_RENAMED,P_H==1)
Planet_dataset_no_habit<- sample(3657,445)
phl_exoplanet_not_habitable<-phl_exoplanet_catalog_RENAMED[Planet_dataset_no_habit,]
final_exoplanet<-rbind(Planet_habitable,phl_exoplanet_not_habitable)
View(final_exoplanet)
phl_exoplanet_catalog_RENAMED <- read_excel("phl_exoplanet_catalog_RENAMED.xlsx")
Planet_not_habitable_l<-subset(phl_exoplanet_catalog_RENAMED,P_H==0)
Planet_habitable<-subset(phl_exoplanet_catalog_RENAMED,P_H==1)
Planet_dataset_no_habit<- sample(3657,445)
phl_exoplanet_not_habitable<-phl_exoplanet_catalog_RENAMED[Planet_dataset_no_habit,]
final_exoplanet<-rbind(Planet_habitable,phl_exoplanet_not_habitable)
phl_exoplanet_catalog_RENAMED <- read_excel("phl_exoplanet_catalog_RENAMED.xlsx",stringsAsFactors = FALSE)
Planet_not_habitable_l<-subset(phl_exoplanet_catalog_RENAMED,P_H==0)
Planet_habitable<-subset(phl_exoplanet_catalog_RENAMED,P_H==1)
Planet_dataset_no_habit<- sample(3657,445)
phl_exoplanet_not_habitable<-phl_exoplanet_catalog_RENAMED[Planet_dataset_no_habit,]
Planets_dataset<-rbind(Planet_habitable,phl_exoplanet_not_habitable)
phl_exoplanet_catalog_RENAMED <- read_excel("phl_exoplanet_catalog_RENAMED.xlsx",stringsAsFactors = FALSE)
phl_exoplanet_catalog_RENAMED <- data.frame(read_excel("phl_exoplanet_catalog_RENAMED.xlsx"),stringsAsFactors = FALSE)
Planet_not_habitable_l<-subset(phl_exoplanet_catalog_RENAMED,P_H==0)
Planet_habitable<-subset(phl_exoplanet_catalog_RENAMED,P_H==1)
Planet_dataset_no_habit<- sample(3657,445)
phl_exoplanet_not_habitable<-phl_exoplanet_catalog_RENAMED[Planet_dataset_no_habit,]
Planets_dataset<-rbind(Planet_habitable,phl_exoplanet_not_habitable)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
View(Planets_dataset)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
print(tune_dec.out)
plot(tune_dec.out,type="contour",swapxy = TRUE,mar = c(2, 1, 1, 2))
levels(Planets_dataset$P_H) <- c("False","True")
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
plot(caret::varImp(cp_vs_ROC))
tune_dec.out=tune.rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,], minsplit=seq(1,20,1))
print(tune_dec.out)
plot(tune_dec.out,type="contour",swapxy = TRUE,mar = c(2, 1, 1, 2))
levels(Planets_dataset$P_H) <- c("False","True")
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
plot(caret::varImp(cp_vs_ROC))
tune_dec.out=tune.rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,], minsplit=seq(1,20,1))
View(Planets_dataset)
tune_dec.out=tune.rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,], minsplit=seq(1,20,1))
print(tune_dec.out)
plot(tune_dec.out,type="contour",swapxy = TRUE,mar = c(2, 1, 1, 2))
levels(Planets_dataset$P_H) <- c("False","True")
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
plot(caret::varImp(cp_vs_ROC))
phl_exoplanet_catalog_RENAMED <- data.frame(read_excel("phl_exoplanet_catalog_RENAMED.xlsx"),stringsAsFactors = FALSE)
Planet_not_habitable_l<-subset(phl_exoplanet_catalog_RENAMED,P_H==0)
Planet_habitable<-subset(phl_exoplanet_catalog_RENAMED,P_H==1)
Planet_dataset_no_habit<- sample(3657,445)
phl_exoplanet_not_habitable<-phl_exoplanet_catalog_RENAMED[Planet_dataset_no_habit,]
Planets_dataset<-rbind(Planet_habitable,phl_exoplanet_not_habitable)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
#########Plotting the correlation chart
#chart.Correlation(Planets_dataset[,2:15], histogram=FALSE)
palette = colorRampPalette(c("green", "blue", "red")) (20)
heatmap(x = cor(Planets_dataset[,2:15]), col = palette, symm = TRUE, margins = c(10, 10),main = 'Planet Features',dist(Planets_dataset[,2:15],method = 'euclidean'))
tune_dec.out=tune.rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,], minsplit=seq(1,20,1))
print(tune_dec.out)
plot(tune_dec.out,type="contour",swapxy = TRUE,mar = c(2, 1, 1, 2))
levels(Planets_dataset$P_H) <- c("False","True")
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
plot(caret::varImp(cp_vs_ROC))
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
View(Planets_dataset)
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
plot(caret::varImp(cp_vs_ROC))
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,method="class",data=Planets_dataset, subset=Planets_dataset_train,minsplit = 5)
var_imp_dec_tree<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict))
plot(caret::varImp(tree.planet,surrogates = FALSE, competes = TRUE))
fourfoldplot(table(tree.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
pred_dec<-prediction(as.numeric(tree.predict$Predict),as.numeric(tree.predict$Test))
roc_dec.perf <- performance(pred_dec, measure = "tpr", x.measure = "fpr")
autoplot(roc_dec.perf)+theme_bw()
View(Planets_dataset)
phl_exoplanet_catalog_RENAMED <- data.frame(read_excel("phl_exoplanet_catalog_RENAMED.xlsx"),stringsAsFactors = FALSE)
Planet_not_habitable_l<-subset(phl_exoplanet_catalog_RENAMED,P_H==0)
Planet_habitable<-subset(phl_exoplanet_catalog_RENAMED,P_H==1)
Planet_dataset_no_habit<- sample(3657,445)
phl_exoplanet_not_habitable<-phl_exoplanet_catalog_RENAMED[Planet_dataset_no_habit,]
Planets_dataset<-rbind(Planet_habitable,phl_exoplanet_not_habitable)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
#########Plotting the correlation chart
#chart.Correlation(Planets_dataset[,2:15], histogram=FALSE)
palette = colorRampPalette(c("green", "blue", "red")) (20)
heatmap(x = cor(Planets_dataset[,2:15]), col = palette, symm = TRUE, margins = c(10, 10),main = 'Planet Features',dist(Planets_dataset[,2:15],method = 'euclidean'))
#########Decision Tree
#tune_dec.out=tune.rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,], minsplit=seq(1,20,1))
print(tune_dec.out)
plot(tune_dec.out,type="contour",swapxy = TRUE,mar = c(2, 1, 1, 2))
levels(Planets_dataset$P_H) <- c("False","True")
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
plot(caret::varImp(cp_vs_ROC))
cp_vs_ROC<-data.frame(cp_vs_ROC[["results"]])
ggplot(cp_vs_ROC,aes(x=cp, y=ROC))+geom_line(color="red",linetype="dashed")+geom_point(color="red")+theme_bw()
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,method="class",data=Planets_dataset, subset=Planets_dataset_train,minsplit = 5)
var_imp_dec_tree<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict))
plot(caret::varImp(tree.planet,surrogates = FALSE, competes = TRUE))
fourfoldplot(table(tree.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
pred_dec<-prediction(as.numeric(tree.predict$Predict),as.numeric(tree.predict$Test))
roc_dec.perf <- performance(pred_dec, measure = "tpr", x.measure = "fpr")
autoplot(roc_dec.perf)+theme_bw()
RF_perf_out<-tuneRF(Planets_dataset[Planets_dataset_train,-c(12,1)],Planets_dataset[Planets_dataset_train,12], ntree=5000)
RF_perf_out<-tuneRF(Planets_dataset[Planets_dataset_train,-c(12,1)],Planets_dataset[Planets_dataset_train,12], ntree=5000)
RF_perf_out<-data.frame(RF_perf_out)
ggplot(RF_perf_out,aes(x=mtry, y=OOBError))+geom_line(color="red",linetype="dashed")+geom_point(color="red")+theme_bw()
rfor.planet <-randomForest(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE, mtry=6)
rfor.predict<-data.frame(predict(rfor.planet, Planets_dataset_test, type = "class"))
#explain_forest(rfor.planet)
var_imp_dec_tree<-data.frame(varImp(rfor.planet))
colnames(var_imp_dec_tree)<-c("Variable Name","Overall importance")
var_imp_dec_tree[,1]<-rownames(var_imp_dec_tree)
rownames(var_imp_dec_tree)<-seq(1:13)
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
xlab("Overall importance") +
ylab("Variable Name") + guides(color = FALSE, size = FALSE) + theme_bw()
tree_plot<-data.frame(rfor.planet[["err.rate"]])
tree_plot[4]<-seq(1:1000)
colnames(tree_plot)<-c("OOB","Not_habitable","Habitable","Trees")
ggplot(tree_plot,aes(x=V4, y=value,color = variable))+geom_line(aes(y=X0,col="OOB"))+geom_point(aes(y=X0,col="OOB"))+geom_line(aes(y=X0,col="X0"))+geom_point(aes(y=X0,col="X0"))+theme_bw()
ggplot() + geom_line(data = tree_plot, aes(x = Trees, y = OOB,color = "OOB") ) +
geom_line(data = tree_plot, aes(x = Trees, y = Not_habitable,color = "Not H") ) +
geom_line(data = tree_plot, aes(x = Trees, y = Habitable,color = "H") )+labs(color = "Legend")+theme() + xlab('Trees') + ylab('Error')+theme_bw()
plot(rfor.planet)
legend("top", colnames(rfor.planet$err.rate), fill=1:ncol(rfor.planet$err.rate))
varImpPlot(rfor.planet)
proximityPlot(rfor.planet)
#print(rfor.planet)
#print(importance(rfor.planet,type=2))
rfor.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(rfor.predict)<-c("Predict","Test")
caret::confusionMatrix(table(rfor.predict))
fourfoldplot(table(rfor.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Random Forest")
pred_for<-prediction(as.numeric(rfor.predict$Predict),as.numeric(rfor.predict$Test))
roc_for.perf <- performance(pred_for, measure = "tpr", x.measure = "fpr")
autoplot(roc_for.perf)+theme_bw()
tune_svm_full.out<-tune(svm ,P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset[Planets_dataset_train,], type = 'C-classification',kernel="polynomial",
ranges =list(cost=(1:10),degree=(1:5)))
print(tune_svm_full.out)
perf_svm<-data.frame(tune_svm_full.out[["performances"]])
ggplot(perf_svm,aes(x=cost,y=degree, z=error))+geom_line(color="red",linetype="dashed")+geom_point(color="red")+theme_bw()
X11(width=60, height=60)
plot_ly(perf_svm[,1:3],x = ~cost, y = ~degree, z = ~error, type="scatter3d", mode="markers")
svm.full <- svm(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=Planets_dataset[Planets_dataset_train,],type = 'C-classification', kernel="polynomial",cost=5,degree=2,)
plot(svm.full,data=Planets_dataset[Planets_dataset_train,],P_H~S_L, ylim = c(-1, 2)) #projection on P_H vs S_L in, the mistaken one are shown in the decision tree
svm.predict_full<-data.frame(predict(svm.full,Planets_dataset[-Planets_dataset_train,],type = "class"))
svm.predict_full["T"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
svm_fin_full<-data.frame(svm.predict_full,stringsAsFactors = TRUE)
colnames(svm_fin_full)<-c("Predict","Test")
caret::confusionMatrix(table(svm_fin_full))
fourfoldplot(table(svm_fin_full), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "SVM_FULL")
pred_svm_full<-prediction(as.numeric(svm_fin_full$Predict),as.numeric(svm_fin_full$Test))
roc_svm_full.perf <- performance(pred_svm_full, measure = "tpr", x.measure = "fpr")
phi_svm_full<-performance(pred_svm_full, "mi")
phi_svm_full@y.values
autoplot(roc_svm_full.perf)+theme_bw()
pca_mix_out<-PCAmix(Planets_dataset[Planets_dataset_train,-c(1,12,15)],Planets_dataset[Planets_dataset_train,c(12,15)],rename.level=TRUE)
pca_mix.planet.test  <-  predict(pca_mix_out, Planets_dataset[-Planets_dataset_train,-c(1,12,15)],Planets_dataset[-Planets_dataset_train,c(12,15)])
plot(pca_mix_out,choice="cor",coloring.var = TRUE,main="All variables")
FAMD_planets.out<-FAMD(Planets_dataset[,-c(1,15)])
#plot(FAMD_planets.out)
fviz_famd_var(FAMD_planets.out, "var", col.var = "contrib")
quali.var <- get_famd_var(FAMD_planets.out, "quali.var")
fviz_famd_var(FAMD_planets.out, "quali.var",col.var = "contrib")
fviz_famd_var(FAMD_planets.out,"quanti.var", col.var = "cos2",gradient.cols = c("red","orange","blue"),repel = TRUE,col.circle = "black" ) +theme_bw()
train_mix<-data.frame(pca_mix_out[["ind"]][["coord"]])
train_mix<-train_mix[1:2]
train_mix["H"]<-Planets_dataset[Planets_dataset_train,12]
#tune_svm_mix.out=tune(svm ,H~.,data=train_mix, kernel="linear", ranges =list(cost=c(seq(0.01, 2, by = 0.01))))
print(tune_svm_mix.out)
plot(tune_svm_mix.out,type="contour",mar = c(2, 1, 1, 2))
svm.planet_mix <- ksvm(H~.,data=train_mix,type = 'C-svc', kernel="vanilladot",C=0.13)
plot(svm.planet_mix,data=train_mix)
svm.predict_mix<-data.frame(predict(svm.planet_mix,pca_mix.planet.test[,1:2]))
colnames(svm.predict_mix)[1]<-"H"
svm.predict_mix["T"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
svm_fin_mix<-data.frame(svm.predict_mix,stringsAsFactors = TRUE)
colnames(svm_fin_mix)<-c("Predict","Test")
caret::confusionMatrix(table(svm_fin_mix))
fourfoldplot(table(svm_fin_mix), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "SVM")
pred_svm<-prediction(as.numeric(svm_fin_mix$Predict),as.numeric(svm_fin_mix$Test))
roc_svm.perf <- performance(pred_svm, measure = "tpr", x.measure = "fpr")
phi_svm<-performance(pred_svm, "mi")
phi_svm@y.values
autoplot(roc_svm.perf)+theme_bw()
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,method="class",data=Planets_dataset, subset=Planets_dataset_train,minsplit = 5)
var_imp_dec_tree<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict))
plot(caret::varImp(tree.planet,surrogates = FALSE, competes = TRUE))
fourfoldplot(table(tree.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
pred_dec<-prediction(as.numeric(tree.predict$Predict),as.numeric(tree.predict$Test))
roc_dec.perf <- performance(pred_dec, measure = "tpr", x.measure = "fpr")
autoplot(roc_dec.perf)+theme_bw()
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
var_imp_dec_tree<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
cp_vs_ROC<-data.frame(cp_vs_ROC[["results"]])
ggplot(cp_vs_ROC,aes(x=cp, y=ROC))+geom_line(color="red",linetype="dashed")+geom_point(color="red")+theme_bw()
rfor.planet <-randomForest(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE, mtry=6)
rfor.predict<-data.frame(predict(rfor.planet, Planets_dataset_test, type = "class"))
#explain_forest(rfor.planet)
var_imp_dec_tree<-data.frame(varImp(rfor.planet))
colnames(var_imp_dec_tree)<-c("Variable Name","Overall importance")
var_imp_dec_tree[,1]<-rownames(var_imp_dec_tree)
rownames(var_imp_dec_tree)<-seq(1:13)
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
xlab("Overall importance") +
ylab("Variable Name") + guides(color = FALSE, size = FALSE) + theme_bw()
tree_plot<-data.frame(rfor.planet[["err.rate"]])
tree_plot[4]<-seq(1:1000)
colnames(tree_plot)<-c("OOB","Not_habitable","Habitable","Trees")
ggplot(tree_plot,aes(x=V4, y=value,color = variable))+geom_line(aes(y=X0,col="OOB"))+geom_point(aes(y=X0,col="OOB"))+geom_line(aes(y=X0,col="X0"))+geom_point(aes(y=X0,col="X0"))+theme_bw()
ggplot() + geom_line(data = tree_plot, aes(x = Trees, y = OOB,color = "OOB") ) +
geom_line(data = tree_plot, aes(x = Trees, y = Not_habitable,color = "Not H") ) +
geom_line(data = tree_plot, aes(x = Trees, y = Habitable,color = "H") )+labs(color = "Legend")+theme() + xlab('Trees') + ylab('Error')+theme_bw()
plot(rfor.planet)
legend("top", colnames(rfor.planet$err.rate), fill=1:ncol(rfor.planet$err.rate))
varImpPlot(rfor.planet)
proximityPlot(rfor.planet)
#print(rfor.planet)
#print(importance(rfor.planet,type=2))
rfor.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(rfor.predict)<-c("Predict","Test")
caret::confusionMatrix(table(rfor.predict))
fourfoldplot(table(rfor.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Random Forest")
pred_for<-prediction(as.numeric(rfor.predict$Predict),as.numeric(rfor.predict$Test))
roc_for.perf <- performance(pred_for, measure = "tpr", x.measure = "fpr")
autoplot(roc_for.perf)+theme_bw()
tree_plot<-data.frame(rfor.planet[["err.rate"]])
tree_plot[4]<-seq(1:1000)
colnames(tree_plot)<-c("OOB","Not_habitable","Habitable","Trees")
ggplot(tree_plot,aes(x=V4, y=value,color = variable))+geom_line(aes(y=X0,col="OOB"))+geom_point(aes(y=X0,col="OOB"))+geom_line(aes(y=X0,col="X0"))+geom_point(aes(y=X0,col="X0"))+theme_bw()
explain_forest(rfor.planet)
phl_exoplanet_catalog_RENAMED <- data.frame(read_excel("phl_exoplanet_catalog_RENAMED.xlsx"),stringsAsFactors = FALSE)
Planet_not_habitable_l<-subset(phl_exoplanet_catalog_RENAMED,P_H==0)
Planet_habitable<-subset(phl_exoplanet_catalog_RENAMED,P_H==1)
Planet_dataset_no_habit<- sample(3657,445)
phl_exoplanet_not_habitable<-phl_exoplanet_catalog_RENAMED[Planet_dataset_no_habit,]
Planets_dataset<-rbind(Planet_habitable,phl_exoplanet_not_habitable)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
levels(Planets_dataset$P_H) <- c("False","True")
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
cp_vs_ROC<-data.frame(cp_vs_ROC[["results"]])
ggplot(cp_vs_ROC,aes(x=cp, y=ROC))+geom_line(color="red",linetype="dashed")+geom_point(color="red")+theme_bw()
ggplot(cp_vs_ROC,aes(x=cp, y=ROC))+geom_line(color="red",linetype="dashed")+geom_point(color="red")+theme_bw()
var_imp_dec_tree<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
plot(caret::varImp(cp_vs_ROC))
cp_vs_ROC<-data.frame(cp_vs_ROC[["results"]])
ggplot(cp_vs_ROC,aes(x=cp, y=ROC))+geom_line(color="red",linetype="dashed")+geom_point(color="red")+theme_bw()
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
var_imp_dec_tree<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
plot(caret::varImp(cp_vs_ROC))
var_imp_dec_tree<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
plot(caret::varImp(cp_vs_ROC))
cp_vs_ROC<-data.frame(cp_vs_ROC[["results"]])
ggplot(cp_vs_ROC,aes(x=cp, y=ROC))+geom_line(color="red",linetype="dashed")+geom_point(color="red")+theme_bw()
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,method="class",data=Planets_dataset, subset=Planets_dataset_train,minsplit = 5)
var_imp_dec_tree<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
plot(caret::varImp(cp_vs_ROC))
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict))
plot(caret::varImp(tree.planet,surrogates = FALSE, competes = TRUE))
fourfoldplot(table(tree.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
pred_dec<-prediction(as.numeric(tree.predict$Predict),as.numeric(tree.predict$Test))
roc_dec.perf <- performance(pred_dec, measure = "tpr", x.measure = "fpr")
autoplot(roc_dec.perf)+theme_bw()
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,method="class",data=Planets_dataset, subset=Planets_dataset_train,minsplit = 5)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict))
plot(caret::varImp(tree.planet,surrogates = FALSE, competes = TRUE))
fourfoldplot(table(tree.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
pred_dec<-prediction(as.numeric(tree.predict$Predict),as.numeric(tree.predict$Test))
roc_dec.perf <- performance(pred_dec, measure = "tpr", x.measure = "fpr")
autoplot(roc_dec.perf)+theme_bw()
set.seed(1)
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
levels(Planets_dataset$P_H) <- c("False","True")
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,method="class",data=Planets_dataset, subset=Planets_dataset_train,minsplit = 5)
var_imp_dec_tree<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
plot(caret::varImp(cp_vs_ROC))
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict))
plot(caret::varImp(tree.planet,surrogates = FALSE, competes = TRUE))
fourfoldplot(table(tree.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
pred_dec<-prediction(as.numeric(tree.predict$Predict),as.numeric(tree.predict$Test))
roc_dec.perf <- performance(pred_dec, measure = "tpr", x.measure = "fpr")
autoplot(roc_dec.perf)+theme_bw()
