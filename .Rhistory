var_imp_dec_tree<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,method="class",data=Planets_dataset, subset=Planets_dataset_train,minsplit = 5)
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,method="class",data=Planets_dataset, subset=Planets_dataset_train,minsplit = 5)
var_imp_dec_tree<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
library(readxl)
library(ISLR)
library(readxl)
library(devtools)
library(ggfortify)
library(ggrepel)
library(ggplot2)
library(corrplot)
library(factoextra)
library(dendextend)
library(mdendro)
library(rpart)
library(rpart.plot)
library(caret)
library(tree)
library(randomForest)
library(randomForestExplainer)
library(rpart.plot)
library(visreg)
library(rfPermute)
library(rattle)
library(PerformanceAnalytics)
library(e1071)
library(InformationValue)
library(ROCR)
library(logistf)
library(MASS)
library(pca3d)
library(doParallel)
library(kernlab)
library(klaR)
library(PCAmixdata)
library(ggplotify)
library(FactoMineR)
library(plotly)
library(klaR)
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
View(Planets_dataset)
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,method="class",data=Planets_dataset, subset=Planets_dataset_train,minsplit = 5)
var_imp_dec_tree<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict))
plot(caret::varImp(tree.planet,surrogates = FALSE, competes = TRUE))
fourfoldplot(table(tree.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
pred_dec<-prediction(as.numeric(tree.predict$Predict),as.numeric(tree.predict$Test))
roc_dec.perf <- performance(pred_dec, measure = "tpr", x.measure = "fpr")
autoplot(roc_dec.perf)+theme_bw()
RF_perf_out<-tuneRF(Planets_dataset[Planets_dataset_train,-c(12,1)],Planets_dataset[Planets_dataset_train,12], ntree=5000)
RF_perf_out<-data.frame(RF_perf_out)
ggplot(RF_perf_out,aes(x=mtry, y=OOBError))+geom_line(color="red",linetype="dashed")+geom_point(color="red")+theme_bw()
rfor.planet <-randomForest(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE, mtry=3)
rfor.predict<-data.frame(predict(rfor.planet, Planets_dataset_test, type = "class"))
explain_forest(rfor.planet)
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
RF_perf_out<-tuneRF(Planets_dataset[Planets_dataset_train,-c(12,1)],Planets_dataset[Planets_dataset_train,12], ntree=5000)
RF_perf_out<-data.frame(RF_perf_out)
ggplot(RF_perf_out,aes(x=mtry, y=OOBError))+geom_line(color="red",linetype="dashed")+geom_point(color="red")+theme_bw()
rfor.planet <-randomForest(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE, mtry=3)
rfor.predict<-data.frame(predict(rfor.planet, Planets_dataset_test, type = "class"))
explain_forest(rfor.planet)
View(Planets_dataset)
library(readxl)
library(ISLR)
library(readxl)
library(devtools)
library(ggfortify)
library(ggrepel)
library(ggplot2)
library(corrplot)
library(factoextra)
library(dendextend)
library(mdendro)
library(rpart)
library(rpart.plot)
library(caret)
library(tree)
library(randomForest)
library(randomForestExplainer)
library(rpart.plot)
library(visreg)
library(rfPermute)
library(rattle)
library(PerformanceAnalytics)
library(e1071)
library(InformationValue)
library(ROCR)
library(logistf)
library(MASS)
library(pca3d)
library(doParallel)
library(kernlab)
library(klaR)
library(PCAmixdata)
library(ggplotify)
library(FactoMineR)
library(plotly)
library(klaR)
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
rfor.planet <-randomForest(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE, mtry=3)
rfor.predict<-data.frame(predict(rfor.planet, Planets_dataset_test, type = "class"))
explain_forest(rfor.planet)
var_imp_dec_tree<-data.frame(varImp(rfor.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
rfor.planet <-randomForest(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE, mtry=3)
rfor.predict<-data.frame(predict(rfor.planet, Planets_dataset_test, type = "class"))
#explain_forest(rfor.planet)
var_imp_dec_tree<-data.frame(varImp(rfor.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
var_imp_dec_tree<-data.frame(varImp(rfor.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
var_imp_dec_tree<-data.frame(varImp(rfor.planet))
View(var_imp_dec_tree)
View(var_imp_dec_tree)
colnames(var_imp_dec_tree)<-c("Overall importance","Overall importance")
View(var_imp_dec_tree)
colnames(var_imp_dec_tree)<-c("Variable Name","Overall importance")
var_imp_dec_tree[0,]
var_imp_dec_tree[1,]
var_imp_dec_tree[,0]
var_imp_dec_tree[,]
var_imp_dec_tree[,1]
var_imp_dec_tree[rownames]
var_imp_dec_tree[rownames()]
rownames(var_imp_dec_tree)
var_imp_dec_tree[,1]<-rownames(var_imp_dec_tree)
View(var_imp_dec_tree)
rownames(var_imp_dec_tree)<-seq(1:13)
View(var_imp_dec_tree)
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
var_imp_dec_tree<-data.frame(varImp(rfor.planet))
colnames(var_imp_dec_tree)<-c("Variable Name","Overall")
var_imp_dec_tree[,1]<-rownames(var_imp_dec_tree)
rownames(var_imp_dec_tree)<-seq(1:13)
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
var_imp_dec_tree<-data.frame(varImp(rfor.planet))
colnames(var_imp_dec_tree)<-c("rowname","Overall")
var_imp_dec_tree[,1]<-rownames(var_imp_dec_tree)
rownames(var_imp_dec_tree)<-seq(1:13)
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
xlab("Overall importance") +
ylab("Variable Name") + guides(color = FALSE, size = FALSE)
plot(rfor.planet)
legend("top", colnames(rfor.planet$err.rate), fill=1:ncol(rfor.planet$err.rate))
varImpPlot(rfor.planet)
proximityPlot(rfor.planet)
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
xlab("Overall importance") +
ylab("Variable Name") + guides(color = FALSE, size = FALSE) + theme_bw()
library(readxl)
Conf_matrix_random_forest <- read_excel("Final_data/Strumenti/Conf_matrix_random_forest.xlsx")
View(Conf_matrix_random_forest)
caret::confusionMatrix(table(Conf_matrix_random_forest))
fourfoldplot(table(Conf_matrix_random_forest), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA Performance")
pred_gen<-prediction(as.numeric(Conf_matrix_random_forest$P),as.numeric(Conf_matrix_random_forest$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+ggtitle("Conf_matrix_LDA Performance")+theme_bw()
View(phi_gen)
phi_gen@x.values[[1]]
phi_gen@y.values[[1]]
tune_svm_full.out<-tune(svm ,P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset[Planets_dataset_train,], type = 'C-classification',kernel="polynomial",
ranges =list(cost=(1:10),degree=(1:5)))
print(tune_svm_full.out)
perf_svm<-data.frame(tune_svm_full.out[["performances"]])
ggplot(perf_svm,aes(x=cost,y=degree, z=error))+geom_line(color="red",linetype="dashed")+geom_point(color="red")+theme_bw()
plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers")
svm.full <- svm(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=Planets_dataset[Planets_dataset_train,],type = 'C-classification', kernel="polynomial",cost=5,degree=2,)
plot(svm.full,data=Planets_dataset[Planets_dataset_train,],P_H~S_L, ylim = c(-1, 2)) #projection on P_H vs S_L in, the mistaken one are shown in the decision tree
svm.predict_full<-data.frame(predict(svm.full,Planets_dataset[-Planets_dataset_train,],type = "class"))
svm.predict_full["T"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
svm_fin_full<-data.frame(svm.predict_full,stringsAsFactors = TRUE)
colnames(svm_fin_full)<-c("Predict","Test")
caret::confusionMatrix(table(svm_fin_full))
fourfoldplot(table(svm_fin_full), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "SVM_FULL")
pred_svm_full<-prediction(as.numeric(svm_fin_full$Predict),as.numeric(svm_fin_full$Test))
roc_svm_full.perf <- performance(pred_svm_full, measure = "tpr", x.measure = "fpr")
phi_svm_full<-performance(pred_svm_full, "mi")
phi_svm_full@y.values
autoplot(roc_svm_full.perf)+theme_bw()
plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers")
plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers",x="Degree", y="Budget",z="Error", color="species")
plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers", color="species")
plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers")
tune_svm<-plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers")
tune_svm.show()
tune_svm.show()
tune_svm<-plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers",labels={"perf_svm$degree": "Sepal Length (cm)","perf_svm$cost": "Sepal Width (cm)","perf_svm$error": "Species of Iris"})
tune_svm<-plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers",labels=c("Wages", "Operating expenses", "Cost of sales"))
tune_svm<-plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers",labels=c("Wages", "Operating expenses", "Cost of sales"))
plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers",labels=c("Wages", "Operating expenses", "Cost of sales"))
plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers",scene = list(
xaxis = list(title = "Cos"),
yaxis = list(title = "Sin"),
zaxis = list(title = "Z")
))
plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers",scene = list(
xaxis = list(title = "Cos"),
yaxis = list(title = "Sin"),
zaxis = list(title = "Z")
))
fig<-plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers",scene = list(
xaxis = list(title = "Cos"),
yaxis = list(title = "Sin"),
zaxis = list(title = "Z")
))
fig
View(fig)
fig<-plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers",scene = list(
xaxis = "Cos",
yaxis =  "Sin",
zaxis = "Z"
))
fig
fig<-plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers")
fig <- fig %>% layout(xaxis = ax, yaxis = ax,zaxis = az)
fig<-plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers")
fig <- fig %>% layout(xaxis = "ax", yaxis = "ax",zaxis = "az")
plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers")
fig<-plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers")
fig %>% layout(xaxis = "ax", yaxis = "ax",zaxis = "az")
fig<-plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers")
fig <- fig %>% layout(xaxis = "ax", yaxis = "ax",zaxis = "az")
fig
fig<-plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers")
fig <- fig %>% layout(xaxis = "ax", yaxis = "ax",zaxis = "az")
fig
fig<-plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers")
fig <- fig %>% layout(xaxis = "ax", yaxis = "ax",zaxis = "az")
fig
fig<-plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers")
fig <- fig %>% layout(xaxis = "ax", yaxis = "ax",zaxis = "az")
fig
fig<-plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers")
fig<-plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers") %>% add_surface() %>%
layout(scene = list(xaxis = list(title = "A"), yaxis = list(title = "B")))
plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers") %>% add_surface() %>%
layout(scene = list(xaxis = list(title = "A"), yaxis = list(title = "B")))
plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers") %>% add_surface() %>%
layout(scene = list(xaxis = list(title = "A"), yaxis = list(title = "B")))
plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers") %>% add_surface() %>%
layout(scene = list(xaxis = list(title = "A"), yaxis = list(title = "B"),zaxis = list(title = "C")))
plot_ly(x=perf_svm$degree, y=perf_svm$cost, z=perf_svm$error, type="scatter3d", mode="markers") %>% add_surface() %>%
layout(scene = list(xaxis = list(title = "A"), yaxis = list(title = "B"),zaxis = list(title = "C")))
perf_svm
plot_ly(perf_svm, type="scatter3d", mode="markers")
perf_svm[1:3,]
perf_svm[,1:3]
plot_ly(perf_svm[,1:3], type="scatter3d", mode="markers")
plot_ly(perf_svm[,1:3],x = ~cost, y = ~degree, z = ~erorr, type="scatter3d", mode="markers")
plot_ly(perf_svm[,1:3],x = ~cost, y = ~degree, z = ~error, type="scatter3d", mode="markers")
X11(width=60, height=60)
plot_ly(perf_svm[,1:3],x = ~cost, y = ~degree, z = ~error, type="scatter3d", mode="markers")
plot_ly(perf_svm[,1:3],x = ~cost, y = ~degree, z = ~error, type="scatter3d", mode="markers")
X11(width=60, height=60)
plot_ly(perf_svm[,1:3],x = ~cost, y = ~degree, z = ~error, type="scatter3d", mode="markers")
library(readxl)
Conf_matrix_SVM <- read_excel("Final_data/Strumenti/Conf_matrix_SVM.xlsx")
View(Conf_matrix_SVM)
caret::confusionMatrix(table(Conf_matrix_SVM))
fourfoldplot(table(Conf_matrix_SVM), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA Performance")
pred_gen<-prediction(as.numeric(Conf_matrix_SVM$P),as.numeric(Conf_matrix_SVM$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+ggtitle("Conf_matrix_LDA Performance")+theme_bw()
View(phi_gen)
phi_gen@y.values[[1]]
library(readxl)
library(ISLR)
library(readxl)
library(devtools)
library(ggfortify)
library(ggrepel)
library(ggplot2)
library(corrplot)
library(factoextra)
library(dendextend)
library(mdendro)
library(rpart)
library(rpart.plot)
library(caret)
library(tree)
library(randomForest)
library(randomForestExplainer)
library(rpart.plot)
library(visreg)
library(rfPermute)
library(rattle)
library(PerformanceAnalytics)
library(e1071)
library(InformationValue)
library(ROCR)
library(logistf)
library(MASS)
library(pca3d)
library(doParallel)
library(kernlab)
library(klaR)
library(PCAmixdata)
library(ggplotify)
library(FactoMineR)
library(plotly)
library(klaR)
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
pca_mix_out<-PCAmix(Planets_dataset[Planets_dataset_train,-c(1,12,15)],Planets_dataset[Planets_dataset_train,c(12,15)],rename.level=TRUE)
pca_mix.planet.test  <-  predict(pca_mix_out, Planets_dataset[-Planets_dataset_train,-c(1,12,15)],Planets_dataset[-Planets_dataset_train,c(12,15)])
plot(pca_mix_out,choice="cor",coloring.var = TRUE,main="All variables")
#FAMD_planets.out<-FAMD(Planets_dataset[,-c(1,15)])
#plot(FAMD_planets.out)
#fviz_famd_var(FAMD_planets.out, "var", col.var = "contrib")
quali.var <- get_famd_var(FAMD_planets.out, "quali.var")
#fviz_famd_var(FAMD_planets.out, "quali.var",col.var = "contrib")
#fviz_famd_var(FAMD_planets.out,"quanti.var", col.var = "cos2",gradient.cols = c("red","orange","blue"),repel = TRUE,col.circle = "black" ) +theme_bw()
train_mix<-data.frame(pca_mix_out[["ind"]][["coord"]])
train_mix<-train_mix[1:2]
train_mix["H"]<-Planets_dataset[Planets_dataset_train,12]
#tune_svm_mix.out=tune(svm ,H~.,data=train_mix, kernel="linear", ranges =list(cost=c(seq(0.01, 2, by = 0.01))))
print(tune_svm_mix.out)
plot(tune_svm_mix.out,type="contour",mar = c(2, 1, 1, 2))
svm.planet_mix <- ksvm(H~.,data=train_mix,type = 'C-svc', kernel="vanilladot",C=0.13)
plot(svm.planet_mix,data=train_mix)
svm.predict_mix<-data.frame(predict(svm.planet_mix,pca_mix.planet.test[,1:2]))
colnames(svm.predict_mix)[1]<-"H"
svm.predict_mix["T"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
svm_fin_mix<-data.frame(svm.predict_mix,stringsAsFactors = TRUE)
colnames(svm_fin_mix)<-c("Predict","Test")
caret::confusionMatrix(table(svm_fin_mix))
fourfoldplot(table(svm_fin_mix), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "SVM")
pred_svm<-prediction(as.numeric(svm_fin_mix$Predict),as.numeric(svm_fin_mix$Test))
roc_svm.perf <- performance(pred_svm, measure = "tpr", x.measure = "fpr")
phi_svm<-performance(pred_svm, "mi")
phi_svm@y.values
autoplot(roc_svm.perf)+theme_bw()
fviz_famd_var(FAMD_planets.out,"quanti.var", col.var = "cos2",gradient.cols = c("red","orange","blue"),repel = TRUE,col.circle = "black" ) +theme_bw()
FAMD_planets.out<-FAMD(Planets_dataset[,-c(1,15)])
fviz_famd_var(FAMD_planets.out,"quanti.var", col.var = "cos2",gradient.cols = c("red","orange","blue"),repel = TRUE,col.circle = "black" ) +theme_bw()
fviz_famd_var(FAMD_planets.out, "quali.var",col.var = "contrib")
fviz_famd_var(FAMD_planets.out, "var", col.var = "contrib")
fviz_famd_var(FAMD_planets.out, "var", col.var = "contrib")
FAMD_planets.out<-FAMD(Planets_dataset[,-c(1)])
fviz_famd_var(FAMD_planets.out, "var", col.var = "contrib")
quali.var <- get_famd_var(FAMD_planets.out, "quali.var")
fviz_famd_var(FAMD_planets.out, "quali.var",col.var = "contrib")
View(FAMD_planets.out)
FAMD_planets.out[["quali.var"]][["coord"]]
FAMD_planets.out[["quali.var"]][["cos2"]]
library(readxl)
Conf_matrix_SVM_PCA <- read_excel("Final_data/Strumenti/Conf_matrix_SVM+PCA.xlsx")
View(Conf_matrix_SVM_PCA)
caret::confusionMatrix(table(Conf_matrix_SVM_PCA))
fourfoldplot(table(Conf_matrix_SVM_PCA), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA Performance")
pred_gen<-prediction(as.numeric(Conf_matrix_SVM_PCA$P),as.numeric(Conf_matrix_SVM_PCA$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+ggtitle("Conf_matrix_LDA Performance")+theme_bw()
caret::confusionMatrix(table(Conf_matrix_SVM_PCA))
fourfoldplot(table(Conf_matrix_SVM_PCA), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA Performance")
pred_gen<-prediction(as.numeric(Conf_matrix_SVM_PCA$P),as.numeric(Conf_matrix_SVM_PCA$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+ggtitle("Conf_matrix_LDA Performance")+theme_bw()
library(readxl)
Conf_matrix_SVM_PCA <- read_excel("Final_data/Strumenti/Conf_matrix_SVM+PCA.xlsx")
View(Conf_matrix_SVM_PCA)
caret::confusionMatrix(table(Conf_matrix_SVM_PCA))
fourfoldplot(table(Conf_matrix_SVM_PCA), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA Performance")
pred_gen<-prediction(as.numeric(Conf_matrix_SVM_PCA$P),as.numeric(Conf_matrix_SVM_PCA$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+ggtitle("Conf_matrix_LDA Performance")+theme_bw()
View(phi_gen)
library(readxl)
library(ggplot2)
library(ggfortify)
Vettore_dati <- data.frame(read_excel("C:/Users/Marzio/Desktop/Entropy/Vettore_dati.xlsx"))
H_R<-data.frame(Vettore_dati[0,3:13])
H_R_C<-data.frame(Vettore_dati[0,3:13])
H<-data.frame(matrix(0, ncol = 2, nrow = 13))
H_C<-data.frame(matrix(0, ncol = 2, nrow = 13))
for (j in 1:11) {
for (i in 1:21) {
H_R[i,j]<-log(Vettore_dati[i,j+2]/Vettore_dati[i,2])*(-Vettore_dati[i,j+2]/Vettore_dati[i,2])
H_R_C[i,j]<-log(Vettore_dati[i,j+2]/Vettore_dati[i,2])*(-Vettore_dati[i,j+2]/Vettore_dati[i,2])*(Vettore_dati[i,2]/sum(Vettore_dati[,2]))
}
H[j,2]<-sum(H_R[,j])
H_C[j,2]<-sum(H_R_C[,j])
H[j,1]<-j
H_C[j,1]<-j
#print(H)
}
ggplot(H,aes(x=X1,y=X2))+geom_point()+ geom_line()+theme_bw()
ggplot(H_C,aes(x=X1,y=X2))+geom_point()+ geom_line()+theme_bw()
