library(readxl)
Conf_matrix_random_forest <- read_excel("Final_data/Strumenti/Conf_matrix_random_forest.xlsx")
View(Conf_matrix_random_forest)
save(Conf_matrix_random_forest, file="Conf_matrix_random_forest.rda")
save(table(Conf_matrix_random_forest), file="Conf_matrix_random_forest.rda")
Conf_matrix_random_forest <- table(Conf_matrix_random_forest)
save(table(Conf_matrix_random_forest), file="Conf_matrix_random_forest.rda")
save(Conf_matrix_random_forest, file="Conf_matrix_random_forest.rda")
load("~/GitHub/Exoplanets_Supervised_Learning/Final_data/Conf_matrix_dec_tree.rda")
Conf_matrix_dec_tree<-table(Conf_matrix_dec_tree)
save(Conf_matrix_dec_tree, file="Conf_matrix_dec_tree.rda")
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(3)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
svm.full <- svm(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=Planets_dataset[Planets_dataset_train,],type = 'C-classification', kernel="polynomial",cost=5,degree=2,)
plot(svm.full,data=Planets_dataset[Planets_dataset_train,],P_H~S_L, ylim = c(-1, 2)) #projection on P_H vs S_L in, the mistaken one are shown in the decision tree
svm.predict_full<-data.frame(predict(svm.full,Planets_dataset[-Planets_dataset_train,],type = "class"))
svm.predict_full["T"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
svm_fin_full<-data.frame(svm.predict_full,stringsAsFactors = TRUE)
colnames(svm_fin_full)<-c("Predict","Test")
caret::confusionMatrix(table(svm_fin_full))
fourfoldplot(table(svm_fin_full), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "SVM_FULL")
pred_svm_full<-prediction(as.numeric(svm_fin_full$Predict),as.numeric(svm_fin_full$Test))
roc_svm_full.perf <- performance(pred_svm_full, measure = "tpr", x.measure = "fpr")
phi_svm_full<-performance(pred_svm_full, "mi")
phi_svm_full@y.values
autoplot(roc_svm_full.perf)+theme_bw()
library(readxl)
Conf_matrix_SVM <- read_excel("Final_data/Strumenti/Conf_matrix_SVM.xlsx")
View(Conf_matrix_SVM)
Conf_matrix_SVM<-table(Conf_matrix_SVM)
save(Conf_matrix_SVM,file="Conf_matrix_SVM.rda")
caret::confusionMatrix(Conf_matrix_SVM)
fourfoldplot(Conf_matrix_SVM, color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Random Forest Performance")
fourfoldplot(Conf_matrix_SVM, color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Conf_matrix_SVM")
pred_gen<-prediction(as.numeric(Conf_matrix_random_forest$P),as.numeric(Conf_matrix_random_forest$T))
library(readxl)
Conf_matrix_SVM <- read_excel("Final_data/Strumenti/Conf_matrix_SVM.xlsx")
View(Conf_matrix_SVM)
pred_gen<-prediction(as.numeric(Conf_matrix_SVM$P),as.numeric(Conf_matrix_SVM$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
plot(phi_lda)
autoplot(roc_gen.perf)+ggtitle("Random Forest Performance")+theme_bw()
fourfoldplot(table(Conf_matrix_SVM), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "SVM Performance")
tune_dec.out=tune(rpart ,P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T, data= Planets_dataset[Planets_dataset_train,],method="class", minsplit = c(5,10,15))
une_dec.out=tune(rpart ,P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T, data= Planets_dataset[Planets_dataset_train,],method="class", minsplit = c(2:4))
