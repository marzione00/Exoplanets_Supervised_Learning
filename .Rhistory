arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE) + theme_bw()
plot(caret::varImp(cp_vs_ROC))
library(readxl)
library(ISLR)
library(readxl)
library(devtools)
library(ggfortify)
library(ggrepel)
library(ggplot2)
library(corrplot)
library(factoextra)
library(dendextend)
library(mdendro)
library(rpart)
library(rpart.plot)
library(caret)
library(tree)
library(randomForest)
library(randomForestExplainer)
library(rpart.plot)
library(visreg)
library(rfPermute)
library(rattle)
library(PerformanceAnalytics)
library(e1071)
library(InformationValue)
library(ROCR)
library(logistf)
library(MASS)
library(pca3d)
library(doParallel)
library(kernlab)
library(klaR)
library(PCAmixdata)
library(ggplotify)
library(FactoMineR)
library(plotly)
library(klaR)
library(car)
library(ggpubr)
phl_exoplanet_catalog_RENAMED <- data.frame(read_excel("phl_exoplanet_catalog_RENAMED.xlsx"),stringsAsFactors = FALSE)
Planet_not_habitable_l<-subset(phl_exoplanet_catalog_RENAMED,P_H==0)
Planet_habitable<-subset(phl_exoplanet_catalog_RENAMED,P_H==1)
Planet_dataset_no_habit<- sample(3657,445)
phl_exoplanet_not_habitable<-phl_exoplanet_catalog_RENAMED[Planet_dataset_no_habit,]
Planets_dataset<-rbind(Planet_habitable,phl_exoplanet_not_habitable)
#save(Planets_dataset,file="Planets_dataset.rda")
#load("Planets_dataset.rda")
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(10)
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
levels(Planets_dataset$P_H) <- c("False","True")
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,method="class",data=Planets_dataset, subset=Planets_dataset_train,minsplit = 5)
var_imp_dec_tree<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE) + theme_bw()
plot(caret::varImp(cp_vs_ROC))
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict))
plot(caret::varImp(tree.planet,surrogates = FALSE, competes = TRUE))
fourfoldplot(table(tree.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
pred_dec<-prediction(as.numeric(tree.predict$Predict),as.numeric(tree.predict$Test))
roc_dec.perf <- performance(pred_dec, measure = "tpr", x.measure = "fpr")
autoplot(roc_dec.perf)+theme_bw()
rfor.planet <-randomForest(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE,ntry=4)
rfor.predict<-data.frame(predict(rfor.planet, Planets_dataset_test, type = "class"))
#explain_forest(rfor.planet)
#var_imp_rforest<-data.frame(varImp(rfor.planet))
#colnames(var_imp_rforest)<-c("Variable","Overall")
#var_imp_rforest[,1]<-rownames(var_imp_rforest)
#rownames(var_imp_rforest)<-seq(1:13)
#ggplot(var_imp_rforest, aes(y=reorder(Variable,Overall),x=Overall,color="red")) +
#  geom_point() +
#  geom_segment(aes(x=0,xend=Overall,yend=Variable)) +
#  scale_color_discrete(name="Variable Group") +
#  xlab("Overall importance") +
#  ylab("Variable Name") + guides(color = FALSE, size = FALSE) + theme_bw()
#plot(rfor.planet)
#tree_plot<-data.frame(rfor.planet[["err.rate"]])
#tree_plot[4]<-seq(1:1000)
#colnames(tree_plot)<-c("OOB","Not_habitable","Habitable","Trees")
#ggplot() + geom_line(data = tree_plot, aes(x = Trees, y = OOB,color = "OOB") ) +
#  geom_line(data = tree_plot, aes(x = Trees, y = Not_habitable,color = "Not H") ) +
#  geom_line(data = tree_plot, aes(x = Trees, y = Habitable,color = "H") )+labs(color = "Legend")+theme() + xlab('Trees') + ylab('Error')+theme_bw()
#plot(rfor.planet)
#legend("top", colnames(rfor.planet$err.rate), fill=1:ncol(rfor.planet$err.rate))
#varImpPlot(rfor.planet)
#proximityPlot(rfor.planet)
#print(rfor.planet)
#print(importance(rfor.planet,type=2))
rfor.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(rfor.predict)<-c("Predict","Test")
caret::confusionMatrix(table(rfor.predict))
fourfoldplot(table(rfor.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Random Forest")
pred_for<-prediction(as.numeric(rfor.predict$Predict),as.numeric(rfor.predict$Test))
roc_for.perf <- performance(pred_for, measure = "tpr", x.measure = "fpr")
autoplot(roc_for.perf)+theme_bw()
proximityPlot(rfor.planet)
varImpPlot(rfor.planet)
load("Planets_dataset.rda")
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(10)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
levels(Planets_dataset$P_H) <- c("False","True")
chart.Correlation(Planets_dataset[,-c(1)])
View(Planets_dataset)
chart.Correlation(Planets_dataset[,-c(1,15)])
chart.Correlation(Planets_dataset[,2:14])
chart.Correlation(Planets_dataset[,2:14],histogram=TRUE, pch="+")
chart.Correlation(Planets_dataset[,2:14],histogram=TRUE, pch="+")
View(Planets_dataset)
chart.Correlation(Planets_dataset[,2:11],histogram=TRUE, pch="+")
chart.Correlation(Planets_dataset[,-c(1,12,15)],histogram=TRUE, pch="+")
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+theme_bw()
library(readxl)
library(ISLR)
library(readxl)
library(devtools)
library(ggfortify)
library(ggrepel)
library(ggplot2)
library(corrplot)
library(factoextra)
library(dendextend)
library(mdendro)
library(rpart)
library(rpart.plot)
library(caret)
library(tree)
library(randomForest)
library(randomForestExplainer)
library(rpart.plot)
library(visreg)
library(rfPermute)
library(rattle)
library(PerformanceAnalytics)
library(e1071)
library(InformationValue)
library(ROCR)
library(logistf)
library(MASS)
library(pca3d)
library(doParallel)
library(kernlab)
library(klaR)
library(PCAmixdata)
library(ggplotify)
library(FactoMineR)
library(plotly)
library(klaR)
library(car)
library(ggpubr)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+theme_bw()
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+theme_bw()
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+theme_bw()
View(Conf_matrix_dec_tree)
caret::confusionMatrix(table(Conf_matrix_dec_tree))
pred_gen<-prediction(Conf_matrix_dec_tree$P,Conf_matrix_dec_tree$T)
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+theme_bw()
pred_gen<-prediction(Conf_matrix_dec_tree$P,Conf_matrix_dec_tree$T)
View(Conf_matrix_dec_tree)
pred_gen<-prediction(as.factor(Conf_matrix_dec_tree$P),as.factor(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+theme_bw()
pred_gen<-prediction(as.factor(Conf_matrix_dec_tree$P),as.factor(Conf_matrix_dec_tree$T))
ciccio<-caret::confusionMatrix(table(Conf_matrix_dec_tree))
View(ciccio)
pred_gen<-prediction(ciccio)
View(ciccio)
ciccio[["table"]]
pred_gen<-prediction(as.factor(Conf_matrix_dec_tree$P),as.factor(Conf_matrix_dec_tree$T))
View(Conf_matrix_dec_tree)
Conf_matrix_dec_tree<- factor(mConf_matrix_dec_tree$P, levels=c('FALSE','TRUE'))
Conf_matrix_dec_tree<- factor(Conf_matrix_dec_tree$P, levels=c('FALSE','TRUE'))
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree<- as.factor(Conf_matrix_dec_tree$P, levels=c('FALSE','TRUE'))
Conf_matrix_dec_tree<- levels(Conf_matrix_dec_tree$P, levels=c('FALSE','TRUE'))
Conf_matrix_dec_tree<- relevels(Conf_matrix_dec_tree$P, levels=c('FALSE','TRUE'))
Conf_matrix_dec_tree<- relevel(Conf_matrix_dec_tree$P, levels=c('FALSE','TRUE'))
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
pred_gen<-prediction(as.factor(Conf_matrix_dec_tree$P),as.factor(Conf_matrix_dec_tree$T))
Conf_matrix_dec_tree$P<-as.factor(Conf_matrix_dec_tree$P)
Conf_matrix_dec_tree$T<-as.factor(Conf_matrix_dec_tree$T)
pred_gen<-prediction(as.factor(Conf_matrix_dec_tree$P),as.factor(Conf_matrix_dec_tree$T))
View(Conf_matrix_dec_tree)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree$P<-as.factor(Conf_matrix_dec_tree$P)
Conf_matrix_dec_tree$T<-as.factor(Conf_matrix_dec_tree$T)
View(Conf_matrix_dec_tree)
pred_gen<-prediction(Conf_matrix_dec_tree$P,Conf_matrix_dec_tree$T)
Conf_matrix_dec_tree$P<-as.number(Conf_matrix_dec_tree$P)
Conf_matrix_dec_tree$T<-as.number(Conf_matrix_dec_tree$T)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_numeric.xlsx")
pred_gen<-prediction(as.factor(Conf_matrix_dec_tree$P),as.factor(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+theme_bw()
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_numeric.xlsx")
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_factor.xlsx")
pred_gen<-prediction(as.factor(Conf_matrix_dec_tree$P),as.factor(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+theme_bw()
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_factor.xlsx")
View(Conf_matrix_dec_tree)
pred_gen<-prediction(as.factor(Conf_matrix_dec_tree$P),as.factor(Conf_matrix_dec_tree$T))
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_factor.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
pred_gen<-prediction(as.factor(Conf_matrix_dec_tree$P),as.factor(Conf_matrix_dec_tree$T))
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_LDA.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
pred_gen<-prediction(as.factor(Conf_matrix_dec_tree$P),as.factor(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+theme_bw()
View(Conf_matrix_dec_tree)
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+theme_bw()
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+theme_bw()
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+theme_bw()
View(Conf_matrix_dec_tree)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_factor.xlsx")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+theme_bw()
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_factor.xlsx")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_factor.xlsx")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+theme_bw()
autoplot(roc_gen.perf, title = "ROCR")+theme_bw()
autoplot(roc_gen.perf, main = "ROCR" )+theme_bw()
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive Rate" )+theme_bw()
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate",legendLabs = NULL)+theme_bw()
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate",legend = NULL)+theme_bw()
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate",show.legend = FALSE)+theme_bw()
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+theme(legend.position = "none")+theme_bw()
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+theme(show.legend = FALSE)+theme_bw()
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+scale_fill_discrete(guide=FALSE)+theme_bw()
View(pred_gen)
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate",legend = FALSE)+scale_fill_discrete(guide=FALSE)+theme_bw()
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate",legend = FALSE)+scale_fill_discrete(guide=FALSE)+theme_bw()
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+scale_fill_discrete(guide=FALSE)+theme_bw()
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+theme(plot.title = element_text(hjust = 0.5))+scale_fill_discrete(guide=FALSE)+theme_bw()
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")theme_bw()+theme(plot.title = element_text(hjust = 0.5))
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+theme_bw()+theme(plot.title = element_text(hjust = 0.5))
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate",size = 2)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate",size = 2)+geom_line(size = 1.5)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.5)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.2)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
install.packages("cairoDevice")
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.2)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
png('test2.png', 500, 500, type='cairo')
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.2)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
ggsave(plot, filename = "example.pdf", device = cairo_pdf,
width = 4, height = 3, units = "in")
plot<- autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.2)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
Cairo(600, 600, file="plot.png", type="png", bg="white")
plot<- autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.2)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
library(cairoDevice)
library(cairoDevice)
Cairo(600, 600, file="plot.png", type="png", bg="white")
Cairo(600, 600, file="plot.png")
asCairoDevice(widget, pointsize = 10)
Cairo()
plot<- autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.1)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
plot<- autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.1)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_factor.xlsx")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
plot<- autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.1)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_factor.xlsx")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
plot<- autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.1)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
library(readxl)
library(ISLR)
library(readxl)
library(devtools)
library(ggfortify)
library(ggrepel)
library(ggplot2)
library(corrplot)
library(factoextra)
library(dendextend)
library(mdendro)
library(rpart)
library(rpart.plot)
library(caret)
library(tree)
library(randomForest)
library(randomForestExplainer)
library(rpart.plot)
library(visreg)
library(rfPermute)
library(rattle)
library(PerformanceAnalytics)
library(e1071)
library(InformationValue)
library(ROCR)
library(logistf)
library(MASS)
library(pca3d)
library(doParallel)
library(kernlab)
library(klaR)
library(PCAmixdata)
library(ggplotify)
library(FactoMineR)
library(plotly)
library(klaR)
library(car)
library(ggpubr)
library(cairoDevice)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree_factor.xlsx")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
plot<- autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.1)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
autoplot(roc_gen.perf, main = "ROCR",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.1)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
autoplot(roc_gen.perf, main = "ROC",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.1)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/CConf_matrix_random_forest_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_random_forest.xlsx")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf, main = "ROC",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.1)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
onf_matrix_dec_tree <- read_excel("Final_data/Strumenti/CConf_matrix_random_forest_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
onf_matrix_dec_tree <- read_excel("Final_data/Strumenti/CConf_matrix_random_forest_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/CConf_matrix_random_forest_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/CConf_matrix_random_forest_boolean.xlsx")
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_random_forest_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_random_forest.xlsx")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf, main = "ROC",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.1)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_random_forest.xlsx")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf, main = "ROC",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.1)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_SVM_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_SVM.xlsx")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf, main = "ROC",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.1)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_SVM+PCA.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_SVM.xlsx")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf, main = "ROC",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.1)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_log_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_log.xlsx")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf, main = "ROC",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.1)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_LDA_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_LDA.xlsx")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf, main = "ROC",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.1)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_QDA_boolean.xlsx")
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_QDA.xlsx")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf, main = "ROC",xlab = "False positive rate", ylab = "True positive rate")+geom_line(size = 1.1)+theme_bw()+theme(plot.title = element_text(hjust = 0.5))+ theme(legend.position = "none")
