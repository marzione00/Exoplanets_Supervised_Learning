library(dendextend)
library(mdendro)
library(rpart)
library(rpart.plot)
library(caret)
library(tree)
library(randomForest)
library(randomForestExplainer)
library(rpart.plot)
library(visreg)
library(rfPermute)
library(rattle)
library(PerformanceAnalytics)
library(e1071)
library(InformationValue)
Planets_dataset <- data.frame(read_excel("C:/Users/Marzio/Desktop/Planets/phl_exoplanet_catalogR.xlsx"))
set.seed(2)
Planets_dataset_train<- sample(499,400)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
chart.Correlation(Planets_dataset[,2:14], histogram=FALSE)
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
rfor.planet <-randomForest(as.factor(P_H)~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE)
pca.train<-Planets_dataset[Planets_dataset_train,]
pca.test<-Planets_dataset[-Planets_dataset_train,]
pca.planet <- prcomp(pca.train[,2:14], center = TRUE,scale. = TRUE)
pca.planet.test  <-  predict(pca.planet, pca.test[,2:14])
#pca.planet.test <- prcomp(pca.test[,2:14], center = TRUE,scale. = TRUE)
autoplot(pca.planet,data=pca.train[,2:14],col="P_H")
autoplot(pca.planet.test)
pca_out<-data.frame(pca.planet[["x"]])
pca_out_test<-data.frame(pca.planet.test[["x"]])
train<-pca_out[1:2]
test<-pca_out_test[1:2]
train["H"]<-pca.train[,12]
test["H"]<-pca.test[,12]
#pca.p <- preProcess(data.frame(Planets_dataset[,2:14]), method='pca',pcaComp = 2,method = c("center", "scale"))
#autoplot(pca.p)
#peppo<- predict(pca.p,"P_H")
#svm_train<-pca_out[,1:2]
svm.planet <- svm(H~., data=train,type = 'C-classification', kernel="linear")
summary(svm.planet)
plot(svm.planet,train)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
#explain_forest(rfor.planet)
plot(rfor.planet)
legend("top", colnames(rfor.planet$err.rate), fill=1:ncol(rfor.planet$err.rate))
varImpPlot(rfor.planet)
proximityPlot(rfor.planet)
print(rfor.planet)
print(importance(rfor.planet,type=2))
#printcp(tree.planet)
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
svm.predict<-data.frame(predict(svm.planet,pca.planet.test[,1:2],type = "class"))
colnames(svm.predict)[1]<-"H"
svm.predict["T"]<-as.factor(pca.test[,12])
pippo<-table()
svm_fin<-data.frame(svm.predict,stringsAsFactors = TRUE)
tree.predict<-predict(tree.planet, Planets_dataset_test, type = "class")
rfor.predict<-predict(rfor.planet, Planets_dataset_test, type = "class")
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict,Planets_dataset_test[,12]))
fourfoldplot(table(tree.predict,Planets_dataset_test[,12]), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
colnames(rfor.predict)<-c("Predict","Test")
caret::confusionMatrix(table(rfor.predict,Planets_dataset_test[,12]))
fourfoldplot(table(rfor.predict,Planets_dataset_test[,12]), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Random Forest")
colnames(svm_fin)<-c("Predict","Test")
caret::confusionMatrix(table(svm_fin))
fourfoldplot(table(svm_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "SVM")
glm.planet<- glm(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=pca.train[,2:14],family=binomial)
summary(glm.planet)
glm.prob<-data.frame(predict(glm.planet,pca.test,type = "response"))
#glm.prob[glm.prob>.5]="1"
#glm.prob[glm.prob<.5]="0"
#glm.prob[glm.prob<.1]="0"
glm.prob<-ifelse(glm.prob > 0.5, "1", "0")
glm_fin<-data.frame(glm.prob,stringsAsFactors = TRUE)
glm_fin["Test"]<-as.factor(pca.test[,12])
colnames(glm_fin)<-c("Predict","Test")
caret::confusionMatrix(table(glm_fin))
fourfoldplot(table(glm_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Logistic")
Planets_dataset <- data.frame(read_excel("C:/Users/Marzio/Desktop/Planets/phl_exoplanet_catalogR.xlsx"))
set.seed(2)
Planets_dataset_train<- sample(499,300)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
chart.Correlation(Planets_dataset[,2:14], histogram=FALSE)
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
rfor.planet <-randomForest(as.factor(P_H)~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE)
pca.train<-Planets_dataset[Planets_dataset_train,]
pca.test<-Planets_dataset[-Planets_dataset_train,]
pca.planet <- prcomp(pca.train[,2:14], center = TRUE,scale. = TRUE)
pca.planet.test  <-  predict(pca.planet, pca.test[,2:14])
#pca.planet.test <- prcomp(pca.test[,2:14], center = TRUE,scale. = TRUE)
autoplot(pca.planet,data=pca.train[,2:14],col="P_H")
autoplot(pca.planet.test)
pca_out<-data.frame(pca.planet[["x"]])
pca_out_test<-data.frame(pca.planet.test[["x"]])
train<-pca_out[1:2]
test<-pca_out_test[1:2]
train["H"]<-pca.train[,12]
test["H"]<-pca.test[,12]
#pca.p <- preProcess(data.frame(Planets_dataset[,2:14]), method='pca',pcaComp = 2,method = c("center", "scale"))
#autoplot(pca.p)
#peppo<- predict(pca.p,"P_H")
#svm_train<-pca_out[,1:2]
svm.planet <- svm(H~., data=train,type = 'C-classification', kernel="linear")
summary(svm.planet)
plot(svm.planet,train)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
#explain_forest(rfor.planet)
plot(rfor.planet)
legend("top", colnames(rfor.planet$err.rate), fill=1:ncol(rfor.planet$err.rate))
varImpPlot(rfor.planet)
proximityPlot(rfor.planet)
print(rfor.planet)
print(importance(rfor.planet,type=2))
#printcp(tree.planet)
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
svm.predict<-data.frame(predict(svm.planet,pca.planet.test[,1:2],type = "class"))
colnames(svm.predict)[1]<-"H"
svm.predict["T"]<-as.factor(pca.test[,12])
pippo<-table()
svm_fin<-data.frame(svm.predict,stringsAsFactors = TRUE)
tree.predict<-predict(tree.planet, Planets_dataset_test, type = "class")
rfor.predict<-predict(rfor.planet, Planets_dataset_test, type = "class")
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict,Planets_dataset_test[,12]))
fourfoldplot(table(tree.predict,Planets_dataset_test[,12]), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
colnames(rfor.predict)<-c("Predict","Test")
caret::confusionMatrix(table(rfor.predict,Planets_dataset_test[,12]))
fourfoldplot(table(rfor.predict,Planets_dataset_test[,12]), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Random Forest")
colnames(svm_fin)<-c("Predict","Test")
caret::confusionMatrix(table(svm_fin))
fourfoldplot(table(svm_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "SVM")
glm.planet<- glm(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=pca.train[,2:14],family=binomial)
summary(glm.planet)
glm.prob<-data.frame(predict(glm.planet,pca.test,type = "response"))
#glm.prob[glm.prob>.5]="1"
#glm.prob[glm.prob<.5]="0"
#glm.prob[glm.prob<.1]="0"
glm.prob<-ifelse(glm.prob > 0.5, "1", "0")
glm_fin<-data.frame(glm.prob,stringsAsFactors = TRUE)
glm_fin["Test"]<-as.factor(pca.test[,12])
colnames(glm_fin)<-c("Predict","Test")
caret::confusionMatrix(table(glm_fin))
fourfoldplot(table(glm_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Logistic")
library(readxl)
library(ISLR)
library(readxl)
library(devtools)
library(ggfortify)
library(ggrepel)
library(ggplot2)
library(corrplot)
library(factoextra)
library(dendextend)
library(mdendro)
library(rpart)
library(rpart.plot)
library(caret)
library(tree)
library(randomForest)
library(randomForestExplainer)
library(rpart.plot)
library(visreg)
library(rfPermute)
library(rattle)
library(PerformanceAnalytics)
library(e1071)
library(InformationValue)
Planets_dataset <- data.frame(read_excel("C:/Users/Marzio/Desktop/Planets/phl_exoplanet_catalogR.xlsx"))
set.seed(2)
Planets_dataset_train<- sample(499,300)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
chart.Correlation(Planets_dataset[,2:14], histogram=FALSE)
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
rfor.planet <-randomForest(as.factor(P_H)~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE)
pca.train<-Planets_dataset[Planets_dataset_train,]
pca.test<-Planets_dataset[-Planets_dataset_train,]
pca.planet <- prcomp(pca.train[,2:14], center = TRUE,scale. = TRUE)
pca.planet.test  <-  predict(pca.planet, pca.test[,2:14])
#pca.planet.test <- prcomp(pca.test[,2:14], center = TRUE,scale. = TRUE)
autoplot(pca.planet,data=pca.train[,2:14],col="P_H")
autoplot(pca.planet.test)
pca_out<-data.frame(pca.planet[["x"]])
pca_out_test<-data.frame(pca.planet.test[["x"]])
train<-pca_out[1:2]
test<-pca_out_test[1:2]
train["H"]<-pca.train[,12]
test["H"]<-pca.test[,12]
#pca.p <- preProcess(data.frame(Planets_dataset[,2:14]), method='pca',pcaComp = 2,method = c("center", "scale"))
#autoplot(pca.p)
#peppo<- predict(pca.p,"P_H")
#svm_train<-pca_out[,1:2]
svm.planet <- svm(H~., data=train,type = 'C-classification', kernel="linear")
summary(svm.planet)
plot(svm.planet,train)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
#explain_forest(rfor.planet)
plot(rfor.planet)
legend("top", colnames(rfor.planet$err.rate), fill=1:ncol(rfor.planet$err.rate))
varImpPlot(rfor.planet)
proximityPlot(rfor.planet)
print(rfor.planet)
print(importance(rfor.planet,type=2))
#printcp(tree.planet)
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
svm.predict<-data.frame(predict(svm.planet,pca.planet.test[,1:2],type = "class"))
colnames(svm.predict)[1]<-"H"
svm.predict["T"]<-as.factor(pca.test[,12])
pippo<-table()
svm_fin<-data.frame(svm.predict,stringsAsFactors = TRUE)
glm.planet<- glm(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=pca.train[,2:14],family=binomial)
summary(glm.planet)
glm_fin<-data.frame(glm.prob,stringsAsFactors = TRUE)
glm_fin["Test"]<-as.factor(pca.test[,12])
tree.predict<-predict(tree.planet, Planets_dataset_test, type = "class")
rfor.predict<-predict(rfor.planet, Planets_dataset_test, type = "class")
glm.prob<-data.frame(predict(glm.planet,pca.test,type = "response"))
glm.prob<-ifelse(glm.prob > 0.5, "1", "0")
#Plot the confusion matrices
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict,Planets_dataset_test[,12]))
fourfoldplot(table(tree.predict,Planets_dataset_test[,12]), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
colnames(rfor.predict)<-c("Predict","Test")
caret::confusionMatrix(table(rfor.predict,Planets_dataset_test[,12]))
fourfoldplot(table(rfor.predict,Planets_dataset_test[,12]), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Random Forest")
colnames(svm_fin)<-c("Predict","Test")
caret::confusionMatrix(table(svm_fin))
fourfoldplot(table(svm_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "SVM")
colnames(glm_fin)<-c("Predict","Test")
caret::confusionMatrix(table(glm_fin))
fourfoldplot(table(glm_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Logistic")
#Loading data
Planets_dataset <- data.frame(read_excel("C:/Users/Marzio/Desktop/Planets/phl_exoplanet_catalogR.xlsx"))
set.seed(2)
#Splitting training vs test set
Planets_dataset_train<- sample(499,300)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
#Plottinng the correlation chart
chart.Correlation(Planets_dataset[,2:14], histogram=FALSE)
#Decision Tree
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-predict(tree.planet, Planets_dataset_test, type = "class")
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
#Random Forest
rfor.planet <-randomForest(as.factor(P_H)~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE)
rfor.predict<-predict(rfor.planet, Planets_dataset_test, type = "class")
#explain_forest(rfor.planet)
plot(rfor.planet)
legend("top", colnames(rfor.planet$err.rate), fill=1:ncol(rfor.planet$err.rate))
varImpPlot(rfor.planet)
proximityPlot(rfor.planet)
print(rfor.planet)
print(importance(rfor.planet,type=2))
#PCA+SVM
pca.train<-Planets_dataset[Planets_dataset_train,]
pca.test<-Planets_dataset[-Planets_dataset_train,]
pca.planet <- prcomp(pca.train[,2:14], center = TRUE,scale. = TRUE)
pca.planet.test  <-  predict(pca.planet, pca.test[,2:14])
autoplot(pca.planet,data=pca.train[,2:14],col="P_H")
autoplot(pca.planet.test)
pca_out<-data.frame(pca.planet[["x"]])
pca_out_test<-data.frame(pca.planet.test[["x"]])
train<-pca_out[1:2]
test<-pca_out_test[1:2]
train["H"]<-pca.train[,12]
test["H"]<-pca.test[,12]
svm.planet <- svm(H~., data=train,type = 'C-classification', kernel="linear")
summary(svm.planet)
plot(svm.planet,train)
svm.predict<-data.frame(predict(svm.planet,pca.planet.test[,1:2],type = "class"))
colnames(svm.predict)[1]<-"H"
svm.predict["T"]<-as.factor(pca.test[,12])
svm_fin<-data.frame(svm.predict,stringsAsFactors = TRUE)
#Logistic Regression
glm.planet<- glm(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=pca.train[,2:14],family=binomial)
summary(glm.planet)
glm_fin<-data.frame(glm.prob,stringsAsFactors = TRUE)
glm_fin["Test"]<-as.factor(pca.test[,12])
glm.prob<-data.frame(predict(glm.planet,pca.test,type = "response"))
glm.prob<-ifelse(glm.prob > 0.5, "1", "0")
#Plot the confusion matrices
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict,Planets_dataset_test[,12]))
fourfoldplot(table(tree.predict,Planets_dataset_test[,12]), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
colnames(rfor.predict)<-c("Predict","Test")
caret::confusionMatrix(table(rfor.predict,Planets_dataset_test[,12]))
fourfoldplot(table(rfor.predict,Planets_dataset_test[,12]), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Random Forest")
colnames(svm_fin)<-c("Predict","Test")
caret::confusionMatrix(table(svm_fin))
fourfoldplot(table(svm_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "SVM")
colnames(glm_fin)<-c("Predict","Test")
caret::confusionMatrix(table(glm_fin))
fourfoldplot(table(glm_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Logistic")
#Loading data
Planets_dataset <- data.frame(read_excel("C:/Users/Marzio/Desktop/Planets/phl_exoplanet_catalogR.xlsx"))
set.seed(2)
#Splitting training vs test set
Planets_dataset_train<- sample(499,300)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
#Plottinng the correlation chart
chart.Correlation(Planets_dataset[,2:14], histogram=FALSE)
#Decision Tree
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
#Random Forest
rfor.planet <-randomForest(as.factor(P_H)~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE)
rfor.predict<-predict(rfor.planet, Planets_dataset_test, type = "class")
#explain_forest(rfor.planet)
plot(rfor.planet)
legend("top", colnames(rfor.planet$err.rate), fill=1:ncol(rfor.planet$err.rate))
varImpPlot(rfor.planet)
proximityPlot(rfor.planet)
print(rfor.planet)
print(importance(rfor.planet,type=2))
#PCA+SVM
pca.train<-Planets_dataset[Planets_dataset_train,]
pca.test<-Planets_dataset[-Planets_dataset_train,]
pca.planet <- prcomp(pca.train[,2:14], center = TRUE,scale. = TRUE)
pca.planet.test  <-  predict(pca.planet, pca.test[,2:14])
autoplot(pca.planet,data=pca.train[,2:14],col="P_H")
autoplot(pca.planet.test)
pca_out<-data.frame(pca.planet[["x"]])
pca_out_test<-data.frame(pca.planet.test[["x"]])
train<-pca_out[1:2]
test<-pca_out_test[1:2]
train["H"]<-pca.train[,12]
test["H"]<-pca.test[,12]
svm.planet <- svm(H~., data=train,type = 'C-classification', kernel="linear")
summary(svm.planet)
plot(svm.planet,train)
svm.predict<-data.frame(predict(svm.planet,pca.planet.test[,1:2],type = "class"))
colnames(svm.predict)[1]<-"H"
svm.predict["T"]<-as.factor(pca.test[,12])
svm_fin<-data.frame(svm.predict,stringsAsFactors = TRUE)
#Logistic Regression
glm.planet<- glm(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=pca.train[,2:14],family=binomial)
summary(glm.planet)
glm_fin<-data.frame(glm.prob,stringsAsFactors = TRUE)
glm_fin["Test"]<-as.factor(pca.test[,12])
glm.prob<-data.frame(predict(glm.planet,pca.test,type = "response"))
glm.prob<-ifelse(glm.prob > 0.5, "1", "0")
#Plot the confusion matrices
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict,Planets_dataset_test[,12]))
fourfoldplot(table(tree.predict,Planets_dataset_test[,12]), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
colnames(rfor.predict)<-c("Predict","Test")
caret::confusionMatrix(table(rfor.predict,Planets_dataset_test[,12]))
fourfoldplot(table(rfor.predict,Planets_dataset_test[,12]), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Random Forest")
colnames(svm_fin)<-c("Predict","Test")
caret::confusionMatrix(table(svm_fin))
fourfoldplot(table(svm_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "SVM")
colnames(glm_fin)<-c("Predict","Test")
caret::confusionMatrix(table(glm_fin))
fourfoldplot(table(glm_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Logistic")
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
View(tree.predict)
caret::confusionMatrix(table(tree.predict,Planets_dataset_test[,12]))
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
View(tree.predict)
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict,Planets_dataset_test[,12]))
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict))
fourfoldplot(table(tree.predict,Planets_dataset_test[,12]), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict))
fourfoldplot(table(tree.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict))
fourfoldplot(table(tree.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
rfor.planet <-randomForest(as.factor(P_H)~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE)
rfor.predict<-predict(rfor.planet, Planets_dataset_test, type = "class")
#explain_forest(rfor.planet)
plot(rfor.planet)
legend("top", colnames(rfor.planet$err.rate), fill=1:ncol(rfor.planet$err.rate))
varImpPlot(rfor.planet)
proximityPlot(rfor.planet)
print(rfor.planet)
print(importance(rfor.planet,type=2))
rfor.predic["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(rfor.predic)<-c("Predict","Test")
caret::confusionMatrix(table(rfor.predict))
fourfoldplot(table(rfor.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Random Forest")
rfor.planet <-randomForest(as.factor(P_H)~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE)
rfor.predict<-predict(rfor.planet, Planets_dataset_test, type = "class")
#explain_forest(rfor.planet)
plot(rfor.planet)
legend("top", colnames(rfor.planet$err.rate), fill=1:ncol(rfor.planet$err.rate))
varImpPlot(rfor.planet)
proximityPlot(rfor.planet)
print(rfor.planet)
print(importance(rfor.planet,type=2))
rfor.predic["Test"]<-as.factor(Planets_dataset_test[,12])
rfor.planet <-randomForest(as.factor(P_H)~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE)
rfor.predict<-data.frame(predict(rfor.planet, Planets_dataset_test, type = "class"))
#explain_forest(rfor.planet)
plot(rfor.planet)
legend("top", colnames(rfor.planet$err.rate), fill=1:ncol(rfor.planet$err.rate))
varImpPlot(rfor.planet)
proximityPlot(rfor.planet)
print(rfor.planet)
print(importance(rfor.planet,type=2))
rfor.predic["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(rfor.predic)<-c("Predict","Test")
rfor.planet <-randomForest(as.factor(P_H)~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE)
rfor.predict<-data.frame(predict(rfor.planet, Planets_dataset_test, type = "class"))
#explain_forest(rfor.planet)
plot(rfor.planet)
legend("top", colnames(rfor.planet$err.rate), fill=1:ncol(rfor.planet$err.rate))
varImpPlot(rfor.planet)
proximityPlot(rfor.planet)
#print(rfor.planet)
#print(importance(rfor.planet,type=2))
rfor.predic["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(rfor.predic)<-c("Predict","Test")
caret::confusionMatrix(table(rfor.predict))
fourfoldplot(table(rfor.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Random Forest")
View(rfor.predict)
rfor.predic["Test"]<-as.factor(Planets_dataset_test[,12])
rfor.planet <-randomForest(as.factor(P_H)~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE)
rfor.predict<-data.frame(predict(rfor.planet, Planets_dataset_test, type = "class"))
#explain_forest(rfor.planet)
plot(rfor.planet)
legend("top", colnames(rfor.planet$err.rate), fill=1:ncol(rfor.planet$err.rate))
varImpPlot(rfor.planet)
proximityPlot(rfor.planet)
#print(rfor.planet)
#print(importance(rfor.planet,type=2))
rfor.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(rfor.predict)<-c("Predict","Test")
caret::confusionMatrix(table(rfor.predict))
fourfoldplot(table(rfor.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Random Forest")
#Loading data
Planets_dataset <- data.frame(read_excel("C:/Users/Marzio/Desktop/Planets/phl_exoplanet_catalogR.xlsx"))
set.seed(2)
#Splitting training vs test set
Planets_dataset_train<- sample(499,300)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
#Plottinng the correlation chart
chart.Correlation(Planets_dataset[,2:14], histogram=FALSE)
#Decision Tree
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict))
fourfoldplot(table(tree.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
#Random Forest
rfor.planet <-randomForest(as.factor(P_H)~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE)
rfor.predict<-data.frame(predict(rfor.planet, Planets_dataset_test, type = "class"))
#explain_forest(rfor.planet)
plot(rfor.planet)
legend("top", colnames(rfor.planet$err.rate), fill=1:ncol(rfor.planet$err.rate))
varImpPlot(rfor.planet)
proximityPlot(rfor.planet)
#print(rfor.planet)
#print(importance(rfor.planet,type=2))
rfor.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(rfor.predict)<-c("Predict","Test")
caret::confusionMatrix(table(rfor.predict))
fourfoldplot(table(rfor.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Random Forest")
#PCA+SVM
pca.train<-Planets_dataset[Planets_dataset_train,]
pca.test<-Planets_dataset[-Planets_dataset_train,]
pca.planet <- prcomp(pca.train[,2:14], center = TRUE,scale. = TRUE)
pca.planet.test  <-  predict(pca.planet, pca.test[,2:14])
autoplot(pca.planet,data=pca.train[,2:14],col="P_H")
autoplot(pca.planet.test)
pca_out<-data.frame(pca.planet[["x"]])
pca_out_test<-data.frame(pca.planet.test[["x"]])
train<-pca_out[1:2]
test<-pca_out_test[1:2]
train["H"]<-pca.train[,12]
test["H"]<-pca.test[,12]
svm.planet <- svm(H~., data=train,type = 'C-classification', kernel="linear")
summary(svm.planet)
plot(svm.planet,train)
svm.predict<-data.frame(predict(svm.planet,pca.planet.test[,1:2],type = "class"))
colnames(svm.predict)[1]<-"H"
svm.predict["T"]<-as.factor(pca.test[,12])
svm_fin<-data.frame(svm.predict,stringsAsFactors = TRUE)
colnames(svm_fin)<-c("Predict","Test")
caret::confusionMatrix(table(svm_fin))
fourfoldplot(table(svm_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "SVM")
#Logistic Regression
glm.planet<- glm(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=pca.train[,2:14],family=binomial)
summary(glm.planet)
glm_fin<-data.frame(glm.prob,stringsAsFactors = TRUE)
glm_fin["Test"]<-as.factor(pca.test[,12])
glm.prob<-data.frame(predict(glm.planet,pca.test,type = "response"))
glm.prob<-ifelse(glm.prob > 0.5, "1", "0")
colnames(glm_fin)<-c("Predict","Test")
caret::confusionMatrix(table(glm_fin))
fourfoldplot(table(glm_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Logistic")
