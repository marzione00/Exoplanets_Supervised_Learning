rfor.planet <-randomForest(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE, mtry=3)
rfor.predict<-data.frame(predict(rfor.planet, Planets_dataset_test, type = "class"))
explain_forest(rfor.planet)
tree_plot<-data.frame(rfor.planet[["err.rate"]])
tree_plot[4]<-seq(1:1000)
colnames(tree_plot)<-c("OOB","Not_habitable","Habitable","Trees")
ggplot(tree_plot,aes(x=V4, y=value,color = variable))+geom_line(aes(y=X0,col="OOB"))+geom_point(aes(y=X0,col="OOB"))+geom_line(aes(y=X0,col="X0"))+geom_point(aes(y=X0,col="X0"))+theme_bw()
ggplot() + geom_line(data = tree_plot, aes(x = Trees, y = OOB,color = "OOB") ) +
geom_line(data = tree_plot, aes(x = Trees, y = Not_habitable,color = "Not H") ) +
geom_line(data = tree_plot, aes(x = Trees, y = Habitable,color = "H") )+labs(color = "Legend")+theme() + xlab('Trees') + ylab('Error')+theme_bw()
plot(rfor.planet)
legend("top", colnames(rfor.planet$err.rate), fill=1:ncol(rfor.planet$err.rate))
varImpPlot(rfor.planet)
proximityPlot(rfor.planet)
#print(rfor.planet)
#print(importance(rfor.planet,type=2))
rfor.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(rfor.predict)<-c("Predict","Test")
caret::confusionMatrix(table(rfor.predict))
fourfoldplot(table(rfor.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Random Forest")
pred_for<-prediction(as.numeric(rfor.predict$Predict),as.numeric(rfor.predict$Test))
roc_for.perf <- performance(pred_for, measure = "tpr", x.measure = "fpr")
autoplot(roc_for.perf)+theme_bw()
train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,], method="rpart")
pippo<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,], method="rpart")
plot(pippo)
View(pippo)
pippo[["results"]][["cp"]]
tuneGrid <- expand.grid(cp = seq(0, 0.05, 0.001))
pippo<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,], method="rpart",tuneGrid = tuneGrid)
plot(pippo)
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
pippo<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,], method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
plot(pippo)
#plot(tune_dec.out,type="contour",swapxy = TRUE,mar = c(2, 1, 1, 2))
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
pippo<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
plot(pippo)
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
pippo<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
plot(pippo)
levels(Planets_dataset[Planets_dataset_train,12]) <- c("False,True")
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
pippo<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
plot(pippo)
levels(Planets_dataset[Planets_dataset_train,12]) <- c("False,True")
levels(Planets_dataset[Planets_dataset_train,12]) <- c("False","True")
View(Planets_dataset)
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
levels(Planets_dataset[Planets_dataset_train,12]) <- c("0"="False","1"="True")
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
levels(x)[0] <- "False"
levels(x)[1] <- "True"
levels(Planets_dataset$P_H)[0] <- "False"
levels(Planets_dataset$P_H)[1] <- "True"
View(Planets_dataset)
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
levels(Planets_dataset$P_H)["0"] <- "False"
levels(Planets_dataset$P_H)["1"] <- "True"
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
levels(Planets_dataset$P_H)["0"] <- "False"
levels(Planets_dataset$P_H)["1"] <- "True"
View(Planets_dataset)
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
levels(Planets_dataset$P_H)[0] <- "False"
levels(Planets_dataset$P_H)[1] <- "True"
View(Planets_dataset)
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
invalid factor level, NA generatedlevels(Planets_dataset$P_H)[0]
levels(Planets_dataset$P_H)[0]
levels(Planets_dataset$P_H)[1]
levels(Planets_dataset$P_H)
levels(Planets_dataset$P_H)["0"]
levels(Planets_dataset$P_H)["1"]
levels(Planets_dataset$P_H)
levels(Planets_dataset$P_H) <- c("False","True")
View(Planets_dataset)
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
pippo<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
plot(pippo)
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
pippo<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
plot(pippo)
View(pippo)
pippo[["results"]]
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
plot(pippo)
cp_vs_ROC<-data.frame(cp_vs_ROC[["results"]])
View(cp_vs_ROC)
ggplot(cp_vs_ROC,aes(x=cp, y=ROC))+geom_line(color="red",linetype="dashed")+geom_point(color="red")+theme_bw()
plot(varImp(cp_vs_ROC))
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
plot(varImp(cp_vs_ROC))
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
plot(varImp(tree.planet))
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
plot(varImp(tree.planet))
caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10)
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
View(Planets_dataset_test)
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict))
fourfoldplot(table(tree.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
pred_dec<-prediction(as.numeric(tree.predict$Predict),as.numeric(tree.predict$Test))
roc_dec.perf <- performance(pred_dec, measure = "tpr", x.measure = "fpr")
autoplot(roc_dec.perf)+theme_bw()
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(2)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict))
fourfoldplot(table(tree.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
pred_dec<-prediction(as.numeric(tree.predict$Predict),as.numeric(tree.predict$Test))
roc_dec.perf <- performance(pred_dec, measure = "tpr", x.measure = "fpr")
autoplot(roc_dec.perf)+theme_bw()
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict))
fourfoldplot(table(tree.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
pred_dec<-prediction(as.numeric(tree.predict$Predict),as.numeric(tree.predict$Test))
roc_dec.perf <- performance(pred_dec, measure = "tpr", x.measure = "fpr")
autoplot(roc_dec.perf)+theme_bw()
caret::varImp(tree.planet,surrogates = FALSE, competes = TRUE)
plot(caret::varImp(tree.planet,surrogates = FALSE, competes = TRUE))
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
print(tune_dec.out)
plot(tune_dec.out,type="contour",swapxy = TRUE,mar = c(2, 1, 1, 2))
levels(Planets_dataset$P_H) <- c("False","True")
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
levels(Planets_dataset$P_H) <- c("False","True")
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
caret::varImp(cp_vs_ROC)
plot(caret::varImp(cp_vs_ROC))
plot(caret::varImp(tree.planet ))
plot(
caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10)
print(tune_dec.out)
plot(tune_dec.out,type="contour",swapxy = TRUE,mar = c(2, 1, 1, 2))
levels(Planets_dataset$P_H) <- c("False","True")
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
print(tune_dec.out)
plot(tune_dec.out,type="contour",swapxy = TRUE,mar = c(2, 1, 1, 2))
levels(Planets_dataset$P_H) <- c("False","True")
tuneGrid <- expand.grid(cp = seq(0, 1, 0.001))
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
classProbs = TRUE,
summaryFunction = twoClassSummary)
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,method="class", data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
cp_vs_ROC<-train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T, data= Planets_dataset[Planets_dataset_train,],trControl = fitControl, method="rpart",tuneGrid = tuneGrid,metric = 'ROC')
caret::varImp(cp_vs_ROC)
plot(caret::varImp(cp_vs_ROC))
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset, subset=Planets_dataset_train,minsplit = 5)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10)
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset, subset=Planets_dataset_train,minsplit = 3)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset, subset=Planets_dataset_train,minsplit = 1)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10)
plot(caret::varImp(cp_vs_ROC))
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,method="class",data=Planets_dataset, subset=Planets_dataset_train,minsplit = 5)
caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10)
plot(caret::varImp(cp_vs_ROC))
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
peppo<-(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
View(peppo)
peppo<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(peppo, aes(x=weight))+
geom_histogram(color="darkblue", fill="lightblue")
ggplot(peppo, aes(x=Overall))+
geom_histogram(color="darkblue", fill="lightblue")
ggplot(peppo, aes(x=rowname))+
geom_histogram(color="darkblue", fill="lightblue")
ggplot(peppo, aes(x=rowname,y=Overall))+
geom_histogram(color="darkblue", fill="lightblue")
ggplot(peppo, aes(x=rowname))
ggplot(peppo, aes(x=rowname)) +
geom_point()
ggplot(peppo, aes(x=rowname,y=Overall))
ggplot(peppo, aes(x=rowname,y=Overall)) +
geom_point()
ggplot(peppo, aes(y=rowname,x=Overall)) +
geom_point()
ggplot(peppo, aes(y=rowname,x=Overall)) +
geom_point() +
geom_segment(aes(x=Overall,xend=Overall,y=0,yend=rowname))
ggplot(peppo, aes(y=rowname,x=Overall)) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,y=rowname))
ggplot(peppo, aes(y=rowname,x=Overall)) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname))
ggplot(peppo, aes(y=reoder(rowname,Overall),x=Overall)) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname))
ggplot(peppo, aes(y=reorder(rowname,Overall),x=Overall)) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname))
ggplot(peppo, aes(y=reorder(rowname,Overall),x=Overall,color=as.factor(var_categ))) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname))
ggplot(peppo, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname))
ggplot(peppo, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name")
ggplot(peppo, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
ggplot(peppo, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)+coord_flip()
ggplot(peppo, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
var_imp_dec_tree<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,method="class",data=Planets_dataset, subset=Planets_dataset_train,minsplit = 5)
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,method="class",data=Planets_dataset, subset=Planets_dataset_train,minsplit = 5)
var_imp_dec_tree<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
library(readxl)
library(ISLR)
library(readxl)
library(devtools)
library(ggfortify)
library(ggrepel)
library(ggplot2)
library(corrplot)
library(factoextra)
library(dendextend)
library(mdendro)
library(rpart)
library(rpart.plot)
library(caret)
library(tree)
library(randomForest)
library(randomForestExplainer)
library(rpart.plot)
library(visreg)
library(rfPermute)
library(rattle)
library(PerformanceAnalytics)
library(e1071)
library(InformationValue)
library(ROCR)
library(logistf)
library(MASS)
library(pca3d)
library(doParallel)
library(kernlab)
library(klaR)
library(PCAmixdata)
library(ggplotify)
library(FactoMineR)
library(plotly)
library(klaR)
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
View(Planets_dataset)
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,method="class",data=Planets_dataset, subset=Planets_dataset_train,minsplit = 5)
var_imp_dec_tree<-data.frame(caret::varImp(tree.planet) %>%
rownames_to_column() %>%
arrange(desc(Overall)) %>%
slice(1:10))
ggplot(var_imp_dec_tree, aes(y=reorder(rowname,Overall),x=Overall,color="red")) +
geom_point() +
geom_segment(aes(x=0,xend=Overall,yend=rowname)) +
scale_color_discrete(name="Variable Group") +
ylab("Overall importance") +
xlab("Variable Name") + guides(color = FALSE, size = FALSE)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
caret::confusionMatrix(table(tree.predict))
plot(caret::varImp(tree.planet,surrogates = FALSE, competes = TRUE))
fourfoldplot(table(tree.predict), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "Decision Tree")
pred_dec<-prediction(as.numeric(tree.predict$Predict),as.numeric(tree.predict$Test))
roc_dec.perf <- performance(pred_dec, measure = "tpr", x.measure = "fpr")
autoplot(roc_dec.perf)+theme_bw()
RF_perf_out<-tuneRF(Planets_dataset[Planets_dataset_train,-c(12,1)],Planets_dataset[Planets_dataset_train,12], ntree=5000)
RF_perf_out<-data.frame(RF_perf_out)
ggplot(RF_perf_out,aes(x=mtry, y=OOBError))+geom_line(color="red",linetype="dashed")+geom_point(color="red")+theme_bw()
rfor.planet <-randomForest(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE, mtry=3)
rfor.predict<-data.frame(predict(rfor.planet, Planets_dataset_test, type = "class"))
explain_forest(rfor.planet)
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"),stringsAsFactors = FALSE)
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(1)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
RF_perf_out<-tuneRF(Planets_dataset[Planets_dataset_train,-c(12,1)],Planets_dataset[Planets_dataset_train,12], ntree=5000)
RF_perf_out<-data.frame(RF_perf_out)
ggplot(RF_perf_out,aes(x=mtry, y=OOBError))+geom_line(color="red",linetype="dashed")+geom_point(color="red")+theme_bw()
rfor.planet <-randomForest(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset, subset=Planets_dataset_train,localImp = TRUE,importance=TRUE,proximity=TRUE, mtry=3)
rfor.predict<-data.frame(predict(rfor.planet, Planets_dataset_test, type = "class"))
explain_forest(rfor.planet)
View(Planets_dataset)
