fourfoldplot(table(lda_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA")
pred_lda<-prediction(as.numeric(lda_fin$Predict),as.numeric(lda_fin$Test))
roc_lda.perf <- performance(pred_lda, measure = "tpr", x.measure = "fpr")
phi_lda<-performance(pred_lda, "phi")
plot(phi_lda)
autoplot(roc_lda.perf)+theme_bw()
lda.planet<- lda(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=Planets_dataset, subset=Planets_dataset_train)
#X11(width=60, height=60)
#partimat(P_H~S_T+S_L+P_T_E,data=Planets_dataset[Planets_dataset_train,],method="lda",nplots.vert=4)
plot(lda.planet)
#glm.planet
#summary(glm.planet)
lda.prob<-data.frame(predict(lda.planet,Planets_dataset[-Planets_dataset_train,],type = "response"))
lda.prob<-lda.prob["class"]
lda_fin<-data.frame(lda.prob,stringsAsFactors = TRUE)
lda_fin["Test"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
colnames(lda_fin)<-c("Predict","Test")
caret::confusionMatrix(table(lda_fin))
fourfoldplot(table(lda_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA")
pred_lda<-prediction(as.numeric(lda_fin$Predict),as.numeric(lda_fin$Test))
roc_lda.perf <- performance(pred_lda, measure = "tpr", x.measure = "fpr")
phi_lda<-performance(pred_lda, "phi")
plot(phi_lda)
autoplot(roc_lda.perf)+theme_bw()
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(4)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
lda.planet<- lda(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=Planets_dataset, subset=Planets_dataset_train)
#X11(width=60, height=60)
#partimat(P_H~S_T+S_L+P_T_E,data=Planets_dataset[Planets_dataset_train,],method="lda",nplots.vert=4)
plot(lda.planet)
#glm.planet
#summary(glm.planet)
lda.prob<-data.frame(predict(lda.planet,Planets_dataset[-Planets_dataset_train,],type = "response"))
lda.prob<-lda.prob["class"]
lda_fin<-data.frame(lda.prob,stringsAsFactors = TRUE)
lda_fin["Test"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
colnames(lda_fin)<-c("Predict","Test")
caret::confusionMatrix(table(lda_fin))
fourfoldplot(table(lda_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA")
pred_lda<-prediction(as.numeric(lda_fin$Predict),as.numeric(lda_fin$Test))
roc_lda.perf <- performance(pred_lda, measure = "tpr", x.measure = "fpr")
phi_lda<-performance(pred_lda, "phi")
plot(phi_lda)
autoplot(roc_lda.perf)+theme_bw()
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(5)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
lda.planet<- lda(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=Planets_dataset, subset=Planets_dataset_train)
#X11(width=60, height=60)
#partimat(P_H~S_T+S_L+P_T_E,data=Planets_dataset[Planets_dataset_train,],method="lda",nplots.vert=4)
plot(lda.planet)
#glm.planet
#summary(glm.planet)
lda.prob<-data.frame(predict(lda.planet,Planets_dataset[-Planets_dataset_train,],type = "response"))
lda.prob<-lda.prob["class"]
lda_fin<-data.frame(lda.prob,stringsAsFactors = TRUE)
lda_fin["Test"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
colnames(lda_fin)<-c("Predict","Test")
caret::confusionMatrix(table(lda_fin))
fourfoldplot(table(lda_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA")
pred_lda<-prediction(as.numeric(lda_fin$Predict),as.numeric(lda_fin$Test))
roc_lda.perf <- performance(pred_lda, measure = "tpr", x.measure = "fpr")
phi_lda<-performance(pred_lda, "phi")
plot(phi_lda)
autoplot(roc_lda.perf)+theme_bw()
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(6)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
qda.planet<- qda(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=Planets_dataset, subset=Planets_dataset_train)
print(qda.planet)
#X11(width=60, height=60)
#partimat(P_H~S_T+P_D+P_PN+P_T_E+S_R_E+S_L+P_R+P_M,data=Planets_dataset[Planets_dataset_train,],method="qda",nplots.vert=4)
plot(qda.planet,dimen = 1, type = "b")
#partimat(P_H ~ S_L+P_T_E, data=Planets_dataset[Planets_dataset_train,], method="qda")
#plot(qda.planet,P_H~S_L)
#glm.planet
#summary(glm.planet)
qda.prob<-data.frame(predict(qda.planet,Planets_dataset[-Planets_dataset_train,],type = "response"))
qda.prob<-qda.prob["class"]
qda_fin<-data.frame(qda.prob,stringsAsFactors = TRUE)
qda_fin["Test"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
colnames(qda_fin)<-c("Predict","Test")
caret::confusionMatrix(table(qda_fin))
fourfoldplot(table(qda_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "QDA")
pred_qda<-prediction(as.numeric(qda_fin$Predict),as.numeric(qda_fin$Test))
roc_qda.perf <- performance(pred_qda, measure = "tpr", x.measure = "fpr")
phi_qda<-performance(pred_qda, "phi")
plot(phi_qda)
autoplot(roc_qda.perf)+theme_bw()
lda.planet<- lda(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=Planets_dataset, subset=Planets_dataset_train)
#X11(width=60, height=60)
#partimat(P_H~S_T+S_L+P_T_E,data=Planets_dataset[Planets_dataset_train,],method="lda",nplots.vert=4)
plot(lda.planet)
#glm.planet
#summary(glm.planet)
lda.prob<-data.frame(predict(lda.planet,Planets_dataset[-Planets_dataset_train,],type = "response"))
lda.prob<-lda.prob["class"]
lda_fin<-data.frame(lda.prob,stringsAsFactors = TRUE)
lda_fin["Test"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
colnames(lda_fin)<-c("Predict","Test")
caret::confusionMatrix(table(lda_fin))
fourfoldplot(table(lda_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA")
pred_lda<-prediction(as.numeric(lda_fin$Predict),as.numeric(lda_fin$Test))
roc_lda.perf <- performance(pred_lda, measure = "tpr", x.measure = "fpr")
phi_lda<-performance(pred_lda, "phi")
plot(phi_lda)
autoplot(roc_lda.perf)+theme_bw()
sink()
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(5)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
lda.planet<- lda(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=Planets_dataset, subset=Planets_dataset_train)
#X11(width=60, height=60)
#partimat(P_H~S_T+S_L+P_T_E,data=Planets_dataset[Planets_dataset_train,],method="lda",nplots.vert=4)
plot(lda.planet)
#glm.planet
#summary(glm.planet)
lda.prob<-data.frame(predict(lda.planet,Planets_dataset[-Planets_dataset_train,],type = "response"))
lda.prob<-lda.prob["class"]
lda_fin<-data.frame(lda.prob,stringsAsFactors = TRUE)
lda_fin["Test"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
colnames(lda_fin)<-c("Predict","Test")
caret::confusionMatrix(table(lda_fin))
fourfoldplot(table(lda_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA")
pred_lda<-prediction(as.numeric(lda_fin$Predict),as.numeric(lda_fin$Test))
roc_lda.perf <- performance(pred_lda, measure = "tpr", x.measure = "fpr")
phi_lda<-performance(pred_lda, "phi")
plot(phi_lda)
autoplot(roc_lda.perf)+theme_bw()
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(4)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
lda.planet<- lda(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=Planets_dataset, subset=Planets_dataset_train)
#X11(width=60, height=60)
#partimat(P_H~S_T+S_L+P_T_E,data=Planets_dataset[Planets_dataset_train,],method="lda",nplots.vert=4)
plot(lda.planet)
#glm.planet
#summary(glm.planet)
lda.prob<-data.frame(predict(lda.planet,Planets_dataset[-Planets_dataset_train,],type = "response"))
lda.prob<-lda.prob["class"]
lda_fin<-data.frame(lda.prob,stringsAsFactors = TRUE)
lda_fin["Test"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
colnames(lda_fin)<-c("Predict","Test")
caret::confusionMatrix(table(lda_fin))
fourfoldplot(table(lda_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA")
pred_lda<-prediction(as.numeric(lda_fin$Predict),as.numeric(lda_fin$Test))
roc_lda.perf <- performance(pred_lda, measure = "tpr", x.measure = "fpr")
phi_lda<-performance(pred_lda, "phi")
plot(phi_lda)
autoplot(roc_lda.perf)+theme_bw()
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(7)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
lda.planet<- lda(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=Planets_dataset, subset=Planets_dataset_train)
#X11(width=60, height=60)
#partimat(P_H~S_T+S_L+P_T_E,data=Planets_dataset[Planets_dataset_train,],method="lda",nplots.vert=4)
plot(lda.planet)
#glm.planet
#summary(glm.planet)
lda.prob<-data.frame(predict(lda.planet,Planets_dataset[-Planets_dataset_train,],type = "response"))
lda.prob<-lda.prob["class"]
lda_fin<-data.frame(lda.prob,stringsAsFactors = TRUE)
lda_fin["Test"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
colnames(lda_fin)<-c("Predict","Test")
caret::confusionMatrix(table(lda_fin))
fourfoldplot(table(lda_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA")
pred_lda<-prediction(as.numeric(lda_fin$Predict),as.numeric(lda_fin$Test))
roc_lda.perf <- performance(pred_lda, measure = "tpr", x.measure = "fpr")
phi_lda<-performance(pred_lda, "phi")
plot(phi_lda)
autoplot(roc_lda.perf)+theme_bw()
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(8)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
lda.planet<- lda(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=Planets_dataset, subset=Planets_dataset_train)
#X11(width=60, height=60)
#partimat(P_H~S_T+S_L+P_T_E,data=Planets_dataset[Planets_dataset_train,],method="lda",nplots.vert=4)
plot(lda.planet)
#glm.planet
#summary(glm.planet)
lda.prob<-data.frame(predict(lda.planet,Planets_dataset[-Planets_dataset_train,],type = "response"))
lda.prob<-lda.prob["class"]
lda_fin<-data.frame(lda.prob,stringsAsFactors = TRUE)
lda_fin["Test"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
colnames(lda_fin)<-c("Predict","Test")
caret::confusionMatrix(table(lda_fin))
fourfoldplot(table(lda_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA")
pred_lda<-prediction(as.numeric(lda_fin$Predict),as.numeric(lda_fin$Test))
roc_lda.perf <- performance(pred_lda, measure = "tpr", x.measure = "fpr")
phi_lda<-performance(pred_lda, "phi")
plot(phi_lda)
autoplot(roc_lda.perf)+theme_bw()
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(9)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
lda.planet<- lda(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=Planets_dataset, subset=Planets_dataset_train)
#X11(width=60, height=60)
#partimat(P_H~S_T+S_L+P_T_E,data=Planets_dataset[Planets_dataset_train,],method="lda",nplots.vert=4)
plot(lda.planet)
#glm.planet
#summary(glm.planet)
lda.prob<-data.frame(predict(lda.planet,Planets_dataset[-Planets_dataset_train,],type = "response"))
lda.prob<-lda.prob["class"]
lda_fin<-data.frame(lda.prob,stringsAsFactors = TRUE)
lda_fin["Test"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
colnames(lda_fin)<-c("Predict","Test")
caret::confusionMatrix(table(lda_fin))
fourfoldplot(table(lda_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA")
pred_lda<-prediction(as.numeric(lda_fin$Predict),as.numeric(lda_fin$Test))
roc_lda.perf <- performance(pred_lda, measure = "tpr", x.measure = "fpr")
phi_lda<-performance(pred_lda, "phi")
plot(phi_lda)
autoplot(roc_lda.perf)+theme_bw()
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(10)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
lda.planet<- lda(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=Planets_dataset, subset=Planets_dataset_train)
#X11(width=60, height=60)
#partimat(P_H~S_T+S_L+P_T_E,data=Planets_dataset[Planets_dataset_train,],method="lda",nplots.vert=4)
plot(lda.planet)
#glm.planet
#summary(glm.planet)
lda.prob<-data.frame(predict(lda.planet,Planets_dataset[-Planets_dataset_train,],type = "response"))
lda.prob<-lda.prob["class"]
lda_fin<-data.frame(lda.prob,stringsAsFactors = TRUE)
lda_fin["Test"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
colnames(lda_fin)<-c("Predict","Test")
caret::confusionMatrix(table(lda_fin))
fourfoldplot(table(lda_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA")
pred_lda<-prediction(as.numeric(lda_fin$Predict),as.numeric(lda_fin$Test))
roc_lda.perf <- performance(pred_lda, measure = "tpr", x.measure = "fpr")
phi_lda<-performance(pred_lda, "phi")
plot(phi_lda)
autoplot(roc_lda.perf)+theme_bw()
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(8)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
lda.planet<- lda(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data=Planets_dataset, subset=Planets_dataset_train)
#X11(width=60, height=60)
#partimat(P_H~S_T+S_L+P_T_E,data=Planets_dataset[Planets_dataset_train,],method="lda",nplots.vert=4)
plot(lda.planet)
#glm.planet
#summary(glm.planet)
lda.prob<-data.frame(predict(lda.planet,Planets_dataset[-Planets_dataset_train,],type = "response"))
lda.prob<-lda.prob["class"]
lda_fin<-data.frame(lda.prob,stringsAsFactors = TRUE)
lda_fin["Test"]<-as.factor(Planets_dataset[-Planets_dataset_train,12])
colnames(lda_fin)<-c("Predict","Test")
caret::confusionMatrix(table(lda_fin))
fourfoldplot(table(lda_fin), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA")
pred_lda<-prediction(as.numeric(lda_fin$Predict),as.numeric(lda_fin$Test))
roc_lda.perf <- performance(pred_lda, measure = "tpr", x.measure = "fpr")
phi_lda<-performance(pred_lda, "phi")
plot(phi_lda)
autoplot(roc_lda.perf)+theme_bw()
library(readxl)
Conf_matrix_LDA <- read_excel("Final_data/Strumenti/Conf_matrix_LDA.xlsx")
View(Conf_matrix_LDA)
caret::confusionMatrix(table(Conf_matrix_LDA))
caret::confusionMatrix(table(Conf_matrix_LDA))
fourfoldplot(table(Conf_matrix_LDA), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA Performance")
pred_gen<-prediction(as.numeric(Conf_matrix_LDA$P),as.numeric(Conf_matrix_LDA$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
plot(phi_lda)
autoplot(roc_gen.perf)+ggtitle("Conf_matrix_LDA Performance")+theme_bw()
sadve(table(Conf_matrix_LDA),file="Conf_matrix_LDA.rda")
Conf_matrix_LDA<-table(Conf_matrix_LDA)
save(Conf_matrix_LDA,file="Conf_matrix_LDA.rda")
load("~/GitHub/Exoplanets_Supervised_Learning/Final_data/Conf_matrix_dec_tree.rda")
caret::confusionMatrix(Conf_matrix_dec_tree)
load("~/GitHub/Exoplanets_Supervised_Learning/Final_data/Conf_matrix_random_forest.rda")
caret::confusionMatrix(Conf_matrix_random_forest)
load("~/GitHub/Exoplanets_Supervised_Learning/Final_data/Conf_matrix_SVM.rda")
caret::confusionMatrix(Conf_matrix_SVM)
load("~/GitHub/Exoplanets_Supervised_Learning/Final_data/Conf_matrix_SVM_PCA.rda")
caret::confusionMatrix(Conf_matrix_SVM_PCA)
load("~/GitHub/Exoplanets_Supervised_Learning/Final_data/Conf_matrix_QDA.rda")
caret::confusionMatrix(Conf_matrix_QDA)
load("~/GitHub/Exoplanets_Supervised_Learning/Final_data/Conf_matrix_LDA.rda")
caret::confusionMatrix(Conf_matrix_LDA)
model2 <- train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data = Planets_dataset[Planets_dataset_train,], method = "rpart",trControl = trainControl("minsplit", number = 10),tuneLength = 10)
# Plot model accuracy vs different values of
# cp (complexity parameter)
plot(model2)
library(readxl)
library(ISLR)
library(readxl)
library(devtools)
library(ggfortify)
library(ggrepel)
library(ggplot2)
library(corrplot)
library(factoextra)
library(dendextend)
library(mdendro)
library(rpart)
library(rpart.plot)
library(caret)
library(tree)
library(randomForest)
library(randomForestExplainer)
library(rpart.plot)
library(visreg)
library(rfPermute)
library(rattle)
library(PerformanceAnalytics)
library(e1071)
library(InformationValue)
library(ROCR)
library(logistf)
library(MASS)
library(pca3d)
library(doParallel)
library(kernlab)
library(klaR)
library(PCAmixdata)
library(ggplotify)
library(FactoMineR)
library(plotly)
library(klaR)
l <- makeCluster(8, type='PSOCK')
registerDoParallel(cl)
sink('exoplanet_log_output.txt')
#########Loading data
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(8)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
model2 <- train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data = Planets_dataset[Planets_dataset_train,], method = "rpart",trControl = trainControl("minsplit", number = 10),tuneLength = 10)
# Plot model accuracy vs different values of
# cp (complexity parameter)
plot(model2)
model2 <- train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data = Planets_dataset[Planets_dataset_train,], method = "rpart",trControl = trainControl("cv", number = 10),tuneLength = 10)
plot(model2)
model2 <- train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data = Planets_dataset[Planets_dataset_train,],tuneGrid =minsplit, method = "rpart",trControl = trainControl("cv", number = 10),tuneLength = 10)
# Plot model accuracy vs different values of
# cp (complexity parameter)
plot(model2)
model2 <- train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data = Planets_dataset[Planets_dataset_train,],tuneGrid =minsplit, method = "rpart",trControl = trainControl("cv", number = 10),tuneLength = 100)
# Plot model accuracy vs different values of
# cp (complexity parameter)
model2 <- train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data = Planets_dataset[Planets_dataset_train,], method = "rpart",trControl = trainControl("cv", number = 10),tuneLength = 100)
# Plot model accuracy vs different values of
# cp (complexity parameter)
plot(model2)
View(model2)
model2[["bestTune"]]
model2[["finalModel"]]
model2[["finalModel"]][["frame"]]
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset,method="class", subset=Planets_dataset_train,cp=0.82)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset,method="class", subset=Planets_dataset_train,cp=0.1)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5,cp=0.82)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
model2 <- train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data = Planets_dataset[Planets_dataset_train,], method = "rpart2",trControl = trainControl("cv", number = 10),tuneLength = 10)
# Plot model accuracy vs different values of
# cp (complexity parameter)
plot(model2)
model2 <- train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data = Planets_dataset[Planets_dataset_train,], method = "rpart2", tuneLength = 6,trControl = train.control,metric = "ROC")
train.control <- trainControl(
method = "repeatedcv",
number = 10, ## 10-fold CV
repeats = 3,## repeated three times
# USE AUC
summaryFunction = twoClassSummary,
classProbs = TRUE
)
model2 <- train(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data = Planets_dataset[Planets_dataset_train,], method = "rpart2", tuneLength = 6,trControl = train.control,metric = "ROC")
# Plot model accuracy vs different values of
# cp (complexity parameter)
plot(model2)
tune_dec.out=tune(rpart ,P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T, data= Planets_dataset[Planets_dataset_train,], ranges =list(minsplit=c(seq(1, 50, by = 1))))
tune_dec.out=tune(rpart,P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,], ranges =list(minsplit=c(seq(1, 50, by = 1))))
tune_dec.out=tune(rpart,P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,], ranges =list(minsplit=c(seq(1, 50, by = 1))))
tree.planet <- rpart2(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
tune_dec.out=tune(rpart2,P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,], ranges =list(minsplit=c(seq(1, 50, by = 1))))
tune_dec.out=tune(rpart2,P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,method="class", data= Planets_dataset[Planets_dataset_train,], ranges =list(minsplit=c(seq(1, 50, by = 1))))
tune_dec.out=tune(rpart,P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,method="class", data= Planets_dataset[Planets_dataset_train,], ranges =list(minsplit=c(seq(1, 50, by = 1))))
tune_dec.out=tune(rpart,P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,method="class", data= Planets_dataset[Planets_dataset_train,], minsplit=seq(10,100,10))
tune_dec.out=tune(rpart,P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,], minsplit=seq(10,100,10))
tune_dec.out=tune.rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,method="class", data= Planets_dataset[Planets_dataset_train,], minsplit=seq(10,100,10))
tune_dec.out=tune.rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,method="class", data= Planets_dataset[Planets_dataset_train,], minsplit=seq(1,10,1))
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"
Planets_dataset[,12]<-Planets_dataset[,12]
Planets_dataset[,15]<-Planets_dataset[,15]
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
tune_dec.out=tune.rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M,method="class", data= Planets_dataset[Planets_dataset_train,], minsplit=seq(1,10,1))
tune_dec.out=tune.rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,], minsplit=seq(1,10,1))
print(tune_dec.out)
plot(tune_dec.out,type="contour",swapxy = TRUE,mar = c(2, 1, 1, 2))
tune_dec.out=tune.rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M, data= Planets_dataset[Planets_dataset_train,], minsplit=seq(1,20,1))
print(tune_dec.out)
plot(tune_dec.out,type="contour",swapxy = TRUE,mar = c(2, 1, 1, 2))
Planets_dataset <- data.frame(read_excel("phl_exoplanet_catalog_FINAL.xlsx"))
Planets_dataset[,12]<-as.factor(Planets_dataset[,12])
Planets_dataset[,15]<-as.factor(Planets_dataset[,15])
set.seed(8)
#########Splitting training vs test set
Planets_dataset_train<- sample(500,350)
Planets_dataset_test<-Planets_dataset[-Planets_dataset_train,]
tree.planet <- rpart(P_H~P_P+S_T+P_D+P_PN+P_A+P_D_E+P_F+P_T_E+S_R_E+S_L+P_R+P_M+S_S_T,data=Planets_dataset,method="class", subset=Planets_dataset_train,minsplit = 5)
fancyRpartPlot(tree.planet,sub = "Planets Habitability", palettes = "OrRd")
tree.predict<-data.frame(predict(tree.planet, Planets_dataset_test, type = "class"))
rpart.plot(tree.planet,box.palette=c("red", "green"),digits=4,extra=106)
tree.predict["Test"]<-as.factor(Planets_dataset_test[,12])
colnames(tree.predict)<-c("Predict","Test")
load("~/GitHub/Exoplanets_Supervised_Learning/Final_data/Conf_matrix_dec_tree.rda")
Conf_matrix_dec_tree
library(readxl)
Conf_matrix_dec_tree <- read_excel("Final_data/Strumenti/Conf_matrix_dec_tree.xlsx")
View(Conf_matrix_dec_tree)
fourfoldplot(table(Conf_matrix_LDA), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA Performance")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
plot(phi_lda)
autoplot(roc_gen.perf)+ggtitle("Conf_matrix_LDA Performance")+theme_bw()
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA Performance")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
plot(phi_lda)
autoplot(roc_gen.perf)+ggtitle("Conf_matrix_LDA Performance")+theme_bw()
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA Performance")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
plot(phi_lda)
autoplot(roc_gen.perf)+ggtitle("Conf_matrix_LDA Performance")+theme_bw()
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA Performance")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
plot(phi_gen)
autoplot(roc_gen.perf)+ggtitle("Conf_matrix_LDA Performance")+theme_bw()
sink()
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA Performance")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
plot(phi_gen)
autoplot(roc_gen.perf)+ggtitle("Conf_matrix_LDA Performance")+theme_bw()
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA Performance")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
phi_gen<-performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+ggtitle("Conf_matrix_LDA Performance")+theme_bw()
caret::confusionMatrix(table(Conf_matrix_dec_tree))
fourfoldplot(table(Conf_matrix_dec_tree), color = c("red","darkgreen"),conf.level = 0, margin = 1, main = "LDA Performance")
pred_gen<-prediction(as.numeric(Conf_matrix_dec_tree$P),as.numeric(Conf_matrix_dec_tree$T))
roc_gen.perf <- performance(pred_gen, measure = "tpr", x.measure = "fpr")
performance(pred_gen, "phi")
print(phi_gen)
autoplot(roc_gen.perf)+ggtitle("Conf_matrix_LDA Performance")+theme_bw()
performance(pred_gen, "phi")
View(pred_gen)
performance(pred_gen, "phi")
View(phi_gen)
View(phi_gen)
phi_gen@y.values[[1]]
